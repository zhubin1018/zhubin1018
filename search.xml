<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FastDFS文件上传</title>
    <url>/2020/03/21/FastDFS%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以中小文件（建议范围：4KB &lt; file_size &lt;500MB），如相册网站、视频网站等等</p>
<a id="more"></a>
<h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200321181830.png" alt=""></p>
<p>FastDFS由跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)构成。<br><code>Tracker server 追踪服务器</code>追踪服务器负责接收客户端的请求，选择合适的组合storage server ，tracker server 与 storage server之间也会用心跳机制来检测对方是否活着。<br>Tracker需要管理的信息也都放在内存中，并且里面所有的Tracker都是对等的（每个节点地位相等），很容易扩展<br>客户端访问集群的时候会随机分配一个Tracker来和客户端交互。</p>
<p><code>Storage server 储存服务器</code>实际存储数据，分成若干个组（group），实际traker就是管理的storage中的组，而组内机器中则存储数据，group可以隔离不同应用的数据，不同的应用的数据放在不同group里面，<br>优点：<br>海量的存储：主从型分布式存储，存储空间方便拓展,<br>fastDFS对文件内容做hash处理，避免出现重复文件<br>然后fastDFS结合Nginx集成, 提供网站效率</p>
<p><code>客户端Client</code>主要是上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。每个客户端服务器都需要安装Nginx</p>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><h3 id="上传交互过程"><a href="#上传交互过程" class="headerlink" title="上传交互过程"></a>上传交互过程</h3><ol>
<li>Storage Server(储存服务器) 向Tracker Server(追踪服务器)定时发送上传状态</li>
<li>Client(客户端)向Tracker Server发送上传链接请求</li>
<li>Tracker Server 查阅可用的Storage</li>
<li>Tracker Server向Client返回信息(Strong的IP和端口)</li>
<li>Client向Storage Server上传文件（file content和metadata）</li>
<li>Storage Server生成file_id</li>
<li>Storage Server将上传内容写入磁盘</li>
<li>Storage Server向Client返回file_id(路径信息和文件名)</li>
<li>Client储存文件信息</li>
</ol>
<h3 id="下载交互过程"><a href="#下载交互过程" class="headerlink" title="下载交互过程"></a>下载交互过程</h3><ol>
<li>Storage Server(储存服务器) 向Tracker Server(追踪服务器)定时发送上传状态</li>
<li>Client(客户端)向Tracker Server发送下载链接请求</li>
<li>Tracker Server 查阅可用的Storage（检验同步状态）</li>
<li>Tracker Server向Client返回信息(Strong的IP和端口)</li>
<li>根据组名，路径，文件名Client向Storage Server下载文件</li>
<li>Storage Server查找文件</li>
<li>Storage Server向Client返回file_content</li>
</ol>
<p>需要说明的是，client为使用FastDFS服务的调用方，client也是一台服务器，它对tracker和storage的调用均为服务器的调用。</p>
<h1 id="Docker搭建fastdfs"><a href="#Docker搭建fastdfs" class="headerlink" title="Docker搭建fastdfs"></a>Docker搭建fastdfs</h1><p>提前说一下Linux是可以搭建的，不过小编觉得麻烦，没有docker香，所以没有写出来，需要的可留言找到要Linux搭建的方法。</p>
<h2 id="拉取镜像并启动"><a href="#拉取镜像并启动" class="headerlink" title="拉取镜像并启动"></a>拉取镜像并启动</h2><p>下面的复制后注意把：<code>IP改了，不要换行</code>。<code>IP改了，不要换行</code>。<code>IP改了，不要换行</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --restart&#x3D;always --privileged&#x3D;true --net&#x3D;host --name&#x3D;fastdfs -e IP&#x3D;自己的IP地址 -e WEB_PORT&#x3D;80 -v $&#123;HOME&#125;&#x2F;fastdfs:&#x2F;var&#x2F;local&#x2F;fdfs registry.cn-beijing.aliyuncs.com&#x2F;tianzuo&#x2F;fastdfs</span><br></pre></td></tr></table></figure>

<p>其中-v ${HOME}/fastdfs:/var/local/fdfs是指：将${HOME}/fastdfs这个目录挂载到容器里的/var/local/fdfs这个目录里。所以上传的文件将被持久化到${HOME}/fastdfs/storage/data里，IP 后面是自己的服务器公网ip或者虚拟机ip，-e WEB_PORT=80 指定nginx端口</p>
<h2 id="放行端口号"><a href="#放行端口号" class="headerlink" title="放行端口号"></a>放行端口号</h2><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200321204937.png" alt=""></p>
<h2 id="测试上传"><a href="#测试上传" class="headerlink" title="测试上传"></a>测试上传</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;进入容器</span><br><span class="line">docker exec -it fastdfs &#x2F;bin&#x2F;bash</span><br><span class="line">&#x2F;&#x2F;创建文件</span><br><span class="line">echo &quot;Hello FastDFS!&quot;&gt;index.html</span><br><span class="line">&#x2F;&#x2F;测试文件上传</span><br><span class="line">fdfs_test &#x2F;etc&#x2F;fdfs&#x2F;client.conf upload index.html</span><br></pre></td></tr></table></figure>
<p>访问生成的链接<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200321204805.png" alt=""></p>
<p>大功告成，打完继续</p>
<h1 id="使用Java代码测试上传"><a href="#使用Java代码测试上传" class="headerlink" title="使用Java代码测试上传"></a>使用Java代码测试上传</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200321205428.png" alt=""><br>—&gt;<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200321205533.png" alt=""><br>–&gt;FINISH</p>
<p><strong>修改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.oschina.zcx7878<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.25.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="创建fdfs-client-conf客户端配置文件"><a href="#创建fdfs-client-conf客户端配置文件" class="headerlink" title="创建fdfs_client.conf客户端配置文件"></a>创建fdfs_client.conf客户端配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">connect_timeout&#x3D;30</span><br><span class="line"></span><br><span class="line">network_timeout&#x3D;60</span><br><span class="line"></span><br><span class="line">#启动时指定的目录</span><br><span class="line">base_path&#x3D;&#x2F;home&#x2F;fastdfs</span><br><span class="line"></span><br><span class="line">#改为自己服务器的ip</span><br><span class="line">tracker_server&#x3D;www.bin1018.com:22122</span><br><span class="line"></span><br><span class="line">log_level&#x3D;info</span><br><span class="line"></span><br><span class="line">use_connection_pool &#x3D; false</span><br><span class="line"></span><br><span class="line">connection_pool_max_idle_time &#x3D; 3600</span><br><span class="line"></span><br><span class="line">load_fdfs_parameters_from_tracker&#x3D;false</span><br><span class="line"></span><br><span class="line">use_storage_id &#x3D; false</span><br><span class="line"></span><br><span class="line">storage_ids_filename &#x3D; storage_ids.conf</span><br><span class="line"></span><br><span class="line">http.tracker_server_port&#x3D;80</span><br></pre></td></tr></table></figure>
<h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.csource.common.MyException;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> IOException, MyException </span>&#123;</span><br><span class="line">       String uploadFilePath = <span class="string">"C:/Users/24707/Pictures/Camera Roll/彭于晏.jpg"</span>;</span><br><span class="line">        String filePath = <span class="keyword">new</span> ClassPathResource(<span class="string">"fdfs_client.conf"</span>).getFile().getAbsolutePath();</span><br><span class="line">        System.out.println(filePath);</span><br><span class="line">        <span class="comment">// 1、加载配置文件，配置文件中的内容就是 tracker 服务的地址。</span></span><br><span class="line">        ClientGlobal.init(filePath);</span><br><span class="line">        <span class="comment">// 2、创建一个 TrackerClient 对象。直接 new 一个。</span></span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        <span class="comment">// 3、使用 TrackerClient 对象创建连接，获得一个 TrackerServer 对象。</span></span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        <span class="comment">// 4、创建一个 StorageServer 的引用，值为 null</span></span><br><span class="line">        StorageServer storageServer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 5、创建一个 StorageClient 对象，需要两个参数 TrackerServer 对象、StorageServer 的引用</span></span><br><span class="line">        StorageClient storageClient = <span class="keyword">new</span> StorageClient(trackerServer, storageServer);</span><br><span class="line">        <span class="comment">// 6、使用 StorageClient 对象上传图片。</span></span><br><span class="line">        <span class="comment">//扩展名不带“.”</span></span><br><span class="line">        String[] strings = storageClient.upload_file(uploadFilePath, <span class="string">"jpg"</span>,</span><br><span class="line">                <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 7、返回数组。包含组名和图片的路径。</span></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"上传完成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200321211829.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200321211617.png" alt=""></p>
<h1 id="使用SpringBoot完成文件上传"><a href="#使用SpringBoot完成文件上传" class="headerlink" title="使用SpringBoot完成文件上传"></a>使用SpringBoot完成文件上传</h1><h2 id="导入项目依赖"><a href="#导入项目依赖" class="headerlink" title="导入项目依赖"></a>导入项目依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.tobato/fastdfs-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tobato<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.26.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="修改yml"><a href="#修改yml" class="headerlink" title="修改yml"></a>修改yml</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fdfs:</span></span><br><span class="line">  <span class="attr">so-timeout:</span> <span class="number">2500</span>       <span class="comment"># 读取时间</span></span><br><span class="line">  <span class="attr">connect-timeout:</span> <span class="number">600</span>   <span class="comment"># 连接超时时间</span></span><br><span class="line">  <span class="attr">thumb-image:</span>           <span class="comment"># 缩略图</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">100</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">tracker-list:</span>          <span class="comment"># tracker服务配置地址列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">www.bin1018.com:22122</span></span><br><span class="line"><span class="attr">upload:</span></span><br><span class="line">  <span class="attr">base-url:</span> <span class="string">http://www.bin1018.com/</span></span><br><span class="line">  <span class="attr">allow-types:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">image/jpeg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">image/png</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">image/bmp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">image/gif</span></span><br></pre></td></tr></table></figure>
<p>注意：allow-types为允许上传文件了类型，若要添加更多类型，可去以下网址看MIME 参考手册，找对应的添加：<br><a href="https://www.w3school.com.cn/media/media_mimeref.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/media/media_mimeref.asp</a></p>
<h2 id="创建配置属性类"><a href="#创建配置属性类" class="headerlink" title="创建配置属性类"></a>创建配置属性类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bin.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 朱彬</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/3/21 22:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"upload"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String baseUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; allowTypes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建服务类"><a href="#创建服务类" class="headerlink" title="创建服务类"></a>创建服务类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 朱彬</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/3/21 22:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(UploadProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UploadService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Log log= LogFactory.getLog(UploadService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FastFileStorageClient storageClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面会报红，但不影响持续运行</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadImage</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、校验文件类型</span></span><br><span class="line">        String contentType = file.getContentType();</span><br><span class="line">        <span class="keyword">if</span> (!prop.getAllowTypes().contains(contentType)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"文件类型不支持"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2、校验文件内容</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedImage image = ImageIO.read(file.getInputStream());</span><br><span class="line">            <span class="keyword">if</span> (image == <span class="keyword">null</span> || image.getWidth() == <span class="number">0</span> || image.getHeight() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"上传文件有问题"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">"校验文件内容失败....&#123;&#125;"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"校验文件内容失败"</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3、上传到FastDFS</span></span><br><span class="line">            <span class="comment">// 3.1、获取扩展名</span></span><br><span class="line">            String extension = StringUtils.substringAfterLast(file.getOriginalFilename(), <span class="string">"."</span>);</span><br><span class="line">            <span class="comment">// 3.2、上传</span></span><br><span class="line">            StorePath storePath = storageClient.uploadFile(file.getInputStream(), file.getSize(), extension, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 返回路径</span></span><br><span class="line">            <span class="keyword">return</span> prop.getBaseUrl() + storePath.getFullPath();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">"【文件上传】上传文件失败！....&#123;&#125;"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> RuntimeException(<span class="string">"【文件上传】上传文件失败！"</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建UploadController"><a href="#创建UploadController" class="headerlink" title="创建UploadController"></a>创建UploadController</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bin.utils.UploadService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 朱彬</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/3/21 22:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"upload"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadService uploadService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作上传</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"doUpload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">doUpload</span><span class="params">(MultipartFile mf)</span></span>&#123;</span><br><span class="line">        System.out.println(mf.getOriginalFilename());</span><br><span class="line">        Map&lt;String, Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        String filePath = uploadService.uploadImage(mf);</span><br><span class="line">        map.put(<span class="string">"path"</span>,filePath);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试页面"><a href="#测试页面" class="headerlink" title="测试页面"></a>测试页面</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload/doUpload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"mf"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 框架</category>
      </categories>
      <tags>
        <tag>FastDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown入门指南</title>
    <url>/2020/03/20/Markdown%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="设置分级标题"><a href="#设置分级标题" class="headerlink" title="设置分级标题"></a>设置分级标题</h1><p><strong>语法示例</strong>：</p>
<blockquote>
<p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题</p>
</blockquote>
<hr>
<a id="more"></a>


<h1 id="加粗文本"><a href="#加粗文本" class="headerlink" title="加粗文本"></a>加粗文本</h1><blockquote>
<p>**印象笔记**<br><strong>印象笔记</strong></p>
<p><strong>快捷键:</strong>  Ctrl/Command + B</p>
</blockquote>
<hr>
<h1 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h1><blockquote>
<p>*印象笔记*<br><em>印象笔记</em></p>
<p><strong>快捷键:</strong> Ctrl/Command + I</p>
</blockquote>
<hr>
<h1 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h1><blockquote>
<p>&lt;u&gt;印象笔记&lt;/u&gt;<br><u>印象笔记</u></p>
<p><strong>快捷键:</strong> Ctrl/Command + U</p>
</blockquote>
<hr>
<h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><blockquote>
<p>~<del>印象笔记</del><br><del>印象笔记</del></p>
</blockquote>
<blockquote>
<p><strong>快捷键:</strong> Ctrl/Command + T</p>
</blockquote>
<hr>
<h1 id="添加分割线"><a href="#添加分割线" class="headerlink" title="添加分割线"></a>添加分割线</h1><blockquote>
<p>***</p>
<hr>
<p><strong>快捷键:</strong>  Ctrl/Command + Shift + -</p>
</blockquote>
<hr>
<h1 id="引用文本"><a href="#引用文本" class="headerlink" title="引用文本"></a>引用文本</h1><blockquote>
<p>&gt;</p>
<blockquote>
<p>近日，印象笔记宣布完成重组。作为Evernote已在中国独立运营近6年的品牌，印象笔记将成为由中方控股的中美合资独立运营实体，并获得红杉宽带跨境数字产业基金首轮数亿元人民币投资</p>
</blockquote>
</blockquote>
<hr>
<h1 id="插入代码块"><a href="#插入代码块" class="headerlink" title="插入代码块"></a>插入代码块</h1><blockquote>
<p>``` key<br>```</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p><strong>快捷键:</strong> Ctrl+Shift+L</p>
</blockquote>
<h3 id="插入日期和时间"><a href="#插入日期和时间" class="headerlink" title="插入日期和时间"></a>插入日期和时间</h3><blockquote>
<p><strong>快捷键:</strong>  Alt + Shift + D</p>
</blockquote>
<blockquote>
<p>2019/12/1 21:31</p>
</blockquote>
<hr>
<h3 id="添加符号列表或者数字列表"><a href="#添加符号列表或者数字列表" class="headerlink" title="添加符号列表或者数字列表"></a>添加符号列表或者数字列表</h3><blockquote>
<p>使用 iOS 版本印象笔记如何快速保存内容？</p>
<ol>
<li>启用印象笔记 Widget ——印象笔记·剪贴板</li>
<li>复制粘贴任意内容<ul>
<li>微信</li>
</ul>
</li>
<li>滑动到 Widget 插件区域即可完成保存<br>印象笔记·剪贴板有什么特点？<br>* 快：开启自动模式，可以自动保存剪贴板的任意内容<br>* 一切：只要可以复制粘贴就可以保存<br>* 有序：全部保存在「我的剪贴板」笔记本并以时间来命名</li>
</ol>
</blockquote>
<blockquote>
<p>使用 iOS 版本印象笔记如何快速保存内容？</p>
<ol>
<li>启用印象笔记 Widget ——印象笔记·剪贴板</li>
<li>复制粘贴任意内容</li>
</ol>
<ul>
<li>微信</li>
</ul>
<ol start="3">
<li>滑动到 Widget 插件区域即可完成保存<br>印象笔记·剪贴板有什么特点？</li>
</ol>
<ul>
<li>快：开启自动模式，可以自动保存剪贴板的任意内容</li>
<li>一切：只要可以复制粘贴就可以保存</li>
<li>有序：全部保存在「我的剪贴板」</li>
<li>笔记本并以时间来命名</li>
</ul>
</blockquote>
<blockquote>
<p><strong>快捷键:</strong><br>   编号列表 Ctrl + Shift + O<br>   项目符号列表 Ctrl + Shift + W</p>
</blockquote>
<hr>
<h3 id="添加待办事项"><a href="#添加待办事项" class="headerlink" title="添加待办事项"></a>添加待办事项</h3><blockquote>
<p>三只青蛙<br>* [x] 第一只青蛙<br>* [ ] 第二只青蛙<br>* [ ] 第三只青蛙</p>
</blockquote>
<blockquote>
<p>三只青蛙</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 第一只青蛙</li>
<li><input disabled="" type="checkbox"> 第二只青蛙</li>
<li><input disabled="" type="checkbox"> 第三只青蛙</li>
</ul>
</blockquote>
<blockquote>
<p><strong>快捷键:</strong> Ctrl + Shift + C</p>
</blockquote>
<hr>
<h3 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h3><blockquote>
<p>[印象笔记官网](<a href="https://www.yinxiang.com/" target="_blank" rel="noopener">https://www.yinxiang.com/</a>)<br><a href="https://www.yinxiang.com/" target="_blank" rel="noopener">印象笔记官网</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown入门指南</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap</title>
    <url>/2020/03/20/HashMap/</url>
    <content><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>HashMap基于哈希表的Map接口实现，是以key-value存储形式存在，即主要用来存放键值对。HashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。</p>
<p>JDK1.8 之前 HashMap 由 数组+链表 组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突(两个对象调用的hashCode方法计算的哈希码值一致导致计算的数组索引值相同)。JDK8之后，当链表长度大于阈值（或者红黑树的边界值，默认为 8）并且当前数组的<strong>长度大于64时</strong>，此时此索引位置上的所有数据改为使用红黑树存储。</p>
<p>补充：将链表转换成红黑树前会判断，即使阈值大于8，但是数组长度小于64，此时并不会将链表变为红黑树。而是选择进行数组扩容。<br>当阈值小于6时红黑树会变回链表。</p>
<p>当然虽然增了红黑树作为底层数据结构，结构变得复杂了，但是阈值大于8并且数组长度大于64时，链表转换为红黑树时，效率也变的相对更高效。</p>
<a id="more"></a>
<h1 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h1><p>1.存取无序的</p>
<p>2.键和值位置都可以是null，但是键位置只能是一个null</p>
<p>3.键位置是唯一的，底层的数据结构控制键的位置</p>
<p>4.jdk1.8前数据结构是：链表 + 数组 jdk1.8之后是：链表 + 数组 + 红黑树</p>
<p>5.阈值(边界值) &gt; 8 并且数组长度大于64，才将链表转换为红黑树，变为红黑树的目的是为了高效的查询。</p>
<h1 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h1><p>1.HashMap&lt;String, Integer&gt; map = new HashMap&lt;&gt;();<br>创建HashMap对象后,在JDK8之前，底层是创建了-个长度是1 6的Entry[] table, 但是在JDK8之后，并没有在创建集合对象的时候创建数组，而是在首次调用put方法时，底层创建长度为16的Node [] table数组。<br>2.假设向哈希表中存储数据A,根据A调用String类中的hashCode方法计算出哈希码值，此哈希码经过某种算法计算以后，得到在Node数组中存放的位置，如果此位置上数据为空，就直接添加到该位置。</p>
<h1 id="HashMap中hash函数是如何实现的"><a href="#HashMap中hash函数是如何实现的" class="headerlink" title="HashMap中hash函数是如何实现的"></a>HashMap中hash函数是如何实现的</h1><p>对key的hashCode做hash操作，无符号右移1 6位做异或运算，下标计算方式是 hash %数组长度<br>假设向哈希表中存储了A，根据A计算的哈希码结合数组长度计算出Node数组的索引是2,此时，该位置已经有了B，那么此时位置不为空,那么此时比对二者的hash值，如果哈希值不相同，那么A会在此空间划出一一个节点变为链表来存储<br>假设此时向哈希表中又存储了一个B2,根据key计算出的哈希值结合数组计算出的索引是2,那么此时该位置已经有了数据，就比较后添加的数据的key和已存在的哈希值是否相同，如果相同，继续比较;调用后天假的肖战所属类的equals方法，比较内容是否相等。如果返回false,就作为链表节点继续添加。如果返回true,则后添加的B2,替换之前的B</p>
<h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200320131310.png" alt=""></p>
]]></content>
      <categories>
        <category>底层原理</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>spring事务</title>
    <url>/2020/03/20/spring%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="一-基本配置"><a href="#一-基本配置" class="headerlink" title="一.基本配置"></a>一.基本配置</h1><h2 id="配置jdbc-properties外部属性文件"><a href="#配置jdbc-properties外部属性文件" class="headerlink" title="配置jdbc.properties外部属性文件"></a>配置jdbc.properties外部属性文件</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/spring2</span></span><br><span class="line"><span class="meta">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
<h2 id="xml文件配置"><a href="#xml文件配置" class="headerlink" title="xml文件配置"></a>xml文件配置</h2><ul>
<li><strong><!--使用基于注解的方式实现Spring的声明式事务--></strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.bin.spring2"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong><!--导入外部的属性文件--></strong> </li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><strong><!--配置数据源--></strong> </li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">id</span>=<span class="string">"dataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong><!--配置使用JdbcTemplate--></strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">value</span>=<span class="string">"#&#123;dataSource&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong><!--1.配置事物管理器--></strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">value</span>=<span class="string">"#&#123;dataSource&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong><!--2、启用事务注解,如果事务管理器的bean的id就是 transactionManager， transaction-manager 属性可以省略 --></strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="二-注解使用及基本知识"><a href="#二-注解使用及基本知识" class="headerlink" title="二.注解使用及基本知识"></a>二.注解使用及基本知识</h1><h2 id="1-Transactional注解声明管理事务"><a href="#1-Transactional注解声明管理事务" class="headerlink" title="1. @Transactional注解声明管理事务"></a>1. <strong>@Transactional注解声明管理事务</strong></h2><h2 id="2-事务传播属性"><a href="#2-事务传播属性" class="headerlink" title="2. 事务传播属性"></a>2. <strong>事务传播属性</strong></h2><blockquote>
<p>当事务被另一个事务调用时,必须指定事务应如何传播.例如:方法可能继续现有的事务中运行,也可能开启一个新的事务,并在自己的事务中运行<br>事务传播行为可以由传播属性指定.Spring定义了以下7种传播行为.</p>
</blockquote>
<table>
<thead>
<tr>
<th>传播属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>propagation_required</strong></td>
<td><strong>如果有事务在运行，当前的方法就在这个事务内运行，否则就开启一个新的事务，并在自己的事务内运行（常用:也是默认选项）</strong></td>
</tr>
<tr>
<td><strong>propagation_required_new</strong></td>
<td><strong>当前的方法必须启动新事务，并在它自己的事务内运行。如果有事务在运行，应该将其挂起。（常用）</strong></td>
</tr>
<tr>
<td>propagation_supports</td>
<td>如果有事务在运行，当前这个方法就在这个事务内运行，否则它可以不运行在事务中</td>
</tr>
<tr>
<td>propagation_not_supported</td>
<td>当前的方法不应该运行在事务中，如果有运行的事务则将其挂起</td>
</tr>
<tr>
<td>propagation_mandatory</td>
<td>当前的方法必须运行在事务内，如果没有正在运行的事务，则抛出异常</td>
</tr>
<tr>
<td>propagation_never</td>
<td>当前方法不应该运行在事务中，如果有运行的事务，则抛出异常</td>
</tr>
<tr>
<td>propagation_nested</td>
<td>如果有事务在运行，当前方法就应该在这个事务的嵌套是事务内运行，否则就启动一个新的事务，并在自己的事务内运行</td>
</tr>
</tbody></table>
<h2 id="3-事务隔离级别-isolation"><a href="#3-事务隔离级别-isolation" class="headerlink" title="3. 事务隔离级别(isolation)"></a>3. <strong>事务隔离级别(isolation)</strong></h2><blockquote>
<p><strong>脏读:Read-uncommitted</strong><br>读未提交，顾名思义，就是一个事务可以读取另一个未提交事务的数据。</p>
<p>事例：老板要给程序员发工资，程序员的工资是3.6万/月。但是发工资时老板不小心按错了数字，按成3.9万/月，该钱已经打到程序员的户口，但是事务还没有提交，就在这时，程序员去查看自己这个月的工资，发现比往常多了3千元，以为涨工资了非常高兴。但是老板及时发现了不对，马上回滚差点就提交了的事务，将数字改成3.6万再提交。</p>
<p>分析：实际程序员这个月的工资还是3.6万，但是程序员看到的是3.9万。他看到的是老板还没提交事务时的数据。这就是脏读。</p>
<p>Read committed！不可重复读，能解决脏读问题。</p>
</blockquote>
<blockquote>
<p><strong>不可重复读:Read-committed</strong><br>读提交，顾名思义，就是一个事务要等另一个事务提交后才能读取数据。</p>
<p>事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（程序员事务开启），收费系统事先检测到他的卡里有3.6万，就在这个时候！！程序员的妻子要把钱全部转出充当家用，并提交。当收费系统准备扣款时，再检测卡里的金额，发现已经没钱了（第二次检测金额当然要等待妻子转出金额事务提交完）。程序员就会很郁闷，明明卡里是有钱的…</p>
<p>分析：这就是读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。但在这个事例中，出现了一个事务范围内两个相同的查询却返回了不同数据，这就是不可重复读。</p>
<p>Repeatable-read ！重复读,能解决不可重复读问题。</p>
</blockquote>
<blockquote>
<p><strong>重复读:RepeatableRead</strong><br>重复读，就是在开始读取数据（事务开启）时，不再允许修改操作</p>
<p>事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（事务开启，不允许其他事务的UPDATE修改操作），收费系统事先检测到他的卡里有3.6万。这个时候他的妻子不能转出金额了。接下来收费系统就可以扣款了。</p>
<p>分析：重复读可以解决不可重复读问题。写到这里，应该明白的一点就是，不可重复读对应的是修改，即UPDATE操作。但是可能还会有幻读问题。因为幻读问题对应的是插入INSERT操作，而不是UPDATE操作。</p>
<p><strong>什么时候会出现幻读？</strong></p>
<p>事例：程序员某一天去消费，花了2千元，然后他的妻子去查看他今天的消费记录（全表扫描FTS，妻子事务开启），看到确实是花了2千元，就在这个时候，程序员花了1万买了一部电脑，即新增INSERT了一条消费记录，并提交。当妻子打印程序员的消费记录清单时（妻子事务提交），发现花了1.2万元，似乎出现了幻觉，这就是幻读。</p>
<p>那怎么解决幻读问题？Serializable！</p>
</blockquote>
<blockquote>
<p><strong>序列化:SERIALIZABLE</strong><br>Serializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。</p>
</blockquote>
<blockquote>
<p><strong>默认的:default</strong><br>数据库的默认隔离界别是什么就是什么 也是默认值</p>
</blockquote>
<p><strong>补充:</strong></p>
<blockquote>
<p>大多数数据库默认的事务隔离级别是Read committed，比如Sql Server , Oracle。Mysql的默认隔离级别是Repeatable read。</p>
</blockquote>
<h2 id="4-回滚事务属性"><a href="#4-回滚事务属性" class="headerlink" title="4. 回滚事务属性"></a>4. <strong>回滚事务属性</strong></h2><blockquote>
<p><strong>只读 ： （readOnly）</strong><br>有的事务方法不会修改数据库的记录，只会读取数据库的记录。此时这个事务方法就可以标注成一个只读方法</p>
</blockquote>
<blockquote>
<p><strong>超时： (timeout)</strong><br>设置事务方法执行的时间，超过某个时间，强制回滚，timeout值是以秒（s）为单位的</p>
</blockquote>
<blockquote>
<p><strong>指定异常出现时回滚或不回滚：</strong><br>              rollbackFor<br>              noRollbackFor<br>              rollbackForClassName<br>              noRollbackForClassName</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域问题</title>
    <url>/2020/03/18/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>对于一个前后端开发项目来说，跨域是再常见不过的问题了</p>
<p>跨域是因为前端项目和接口所在服务器的ip或者端口不同，浏览器认为这样不安全，所以会先发送个options请求“试试水”，options请求就是看你这接口有没有毛病，其他啥也不干，所以后台只需要判断请求类型，只要是options就直接放行即可</p>
<a id="more"></a>
<ol>
<li><strong>同源解决</strong></li>
</ol>
<p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200318225021.png" alt=""></p>
<ol start="2">
<li><strong>重写WebMvcConfigurer（全局跨域）</strong><br>在任意配置类，返回一个新的WebMvcConfigurer Bean，并重写其提供的跨域请求处理的接口，目的是添加映射路径和具体的CORS配置信息。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bin.system.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 朱彬</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/3/18 22:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">//重写父类提供的跨域请求处理的接口</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//添加映射路径</span></span><br><span class="line">                registry.addMapping(<span class="string">"/**"</span>)</span><br><span class="line">                        <span class="comment">//放行哪些原始域</span></span><br><span class="line">                        .allowedOrigins(<span class="string">"*"</span>)</span><br><span class="line">                        <span class="comment">//是否发送Cookie信息</span></span><br><span class="line">                        .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                        <span class="comment">//放行哪些原始域(请求方式)</span></span><br><span class="line">                        .allowedMethods(<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"DELETE"</span>,<span class="string">"PATCH"</span>)</span><br><span class="line">                        <span class="comment">//放行哪些原始域(头部信息)</span></span><br><span class="line">                        .allowedHeaders(<span class="string">"*"</span>)</span><br><span class="line">                        <span class="comment">//暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）</span></span><br><span class="line">                        .exposedHeaders(<span class="string">"Header1"</span>, <span class="string">"Header2"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p><strong>使用注解（局部跨域）</strong><br>在方法上（@RequestMapping）使用注解 @CrossOrigin ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"login"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>实现Filter-采用过滤器的方式</strong></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CORSFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletResponse res = (HttpServletResponse) response;</span><br><span class="line">        res.addHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line">        res.addHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">        res.addHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET, POST, DELETE, PUT"</span>);</span><br><span class="line">        res.addHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,X-CAF-Authorization-Token,sessionToken,X-TOKEN"</span>);</span><br><span class="line">        <span class="keyword">if</span> (((HttpServletRequest) request).getMethod().equals(<span class="string">"OPTIONS"</span>)) &#123;</span><br><span class="line">            response.getWriter().println(<span class="string">"ok"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>nginx反向代理</strong></li>
</ol>
]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro</title>
    <url>/2020/03/17/shiro/</url>
    <content><![CDATA[<h1 id="Shiro概述"><a href="#Shiro概述" class="headerlink" title="Shiro概述"></a>Shiro概述</h1><p>Apache Shiro 是Java 的一个安全框架。Shiro 可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE 环境，也可以用在JavaEE 环境。Shiro 可以帮助我们完成：认证、授权、加密、会话管理、与Web 集成、缓存等。</p>
<p>在概念层，Shiro 架构包含三个主要的理念：Subject,SecurityManager和 Realm。下面的图展示了这些组件如何相互作用，我们将在下面依次对其进行描述<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200317110538.png" alt=""></p>
<ul>
<li>Subject：当前用户，Subject 可以是一个人，但也可以是第三方服务、守护进程帐户、时钟守护任务或者其它–当前和软件交互的任何事件。</li>
<li>SecurityManager：管理所有Subject，SecurityManager 是 Shiro 架构的核心，配合内部安全组件共同组成安全伞。Realms：用于进行权限信息的验证，我们自己实现。</li>
<li>Realm 本质上是一个特定的安全 DAO：它封装与数据源连接的细节，得到Shiro 所需的相关的数据。在配置 Shiro 的时候，你必须指定至少一个Realm 来实现认证（authentication）和/或授权（authorization）。</li>
</ul>
<p>我们需要实现Realms的Authentication 和 Authorization。其中 Authentication 是用来验证用户身份，Authorization 是授权访问控制，用于对用户进行的操作授权，证明该用户是否允许进行当前操作，如访问某个链接，某个资源文件等。也可继承AuthenticatingRealm，其包含身份和权限的认证。</p>
<a id="more"></a>
<h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200317092453.png" alt=""></p>
<ul>
<li><p><strong>Authentication：</strong> 身份认证/登录，验证用户是不是拥有相应的身份；</p>
</li>
<li><p><strong>Authorization：</strong> 授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用<br>户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</p>
</li>
<li><p><strong>Session Manager：</strong> 会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信<br>息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；</p>
</li>
<li><p><strong>Cryptography：</strong> 加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</p>
</li>
<li><p><strong>Web Support：</strong> Web 支持，可以非常容易的集成到Web 环境；</p>
</li>
<li><p><strong>Caching：</strong> 缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；</p>
</li>
<li><p><strong>Concurrency：</strong> shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能 把权限自动传播过去；</p>
</li>
<li><p><strong>Testing：</strong> 提供测试支持；</p>
</li>
<li><p><strong>Run As：</strong> 允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</p>
</li>
<li><p><strong>Remember Me：</strong> 记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录<br>了。<br><u>注意：</u><u>Shiro </u><u>不会去维护用户、维护权限；这些需要我们自己去设计</u><u>/</u><u>提供；然后通过</u><u> </u><br><u>相应的接口注入给</u><u>Shiro</u><u>即可。</u></p>
</li>
</ul>
<h2 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a>架构说明</h2><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200317093122.png" alt=""></p>
<ul>
<li><p><strong>Subject：</strong> Subject即主体，外部应用与subject进行交互，subject记录了当前操作用户，将用户的概念理解为当前操作的主体，可能是一个通过浏览器请求的用户，也可能是一个运行的程序。 Subject在shiro中是一个接口，接口中定义了很多认证授相关的方法，外部程序通过subject进行认证授，而subject是通过SecurityManager安全管理器进行认证授权；</p>
</li>
<li><p><strong>SecurityManager：</strong> SecurityManager即安全管理器，对全部的subject进行安全管理，它是shiro的核心，负责对所有的subject进行安全管理。通过SecurityManager可以完成subject的认证、授权等，实质上SecurityManager是通过Authenticator进行认证，通过Authorizer进行授权，通过SessionManager进行会话管理等。<br>SecurityManager是一个接口，继承了Authenticator, Authorizer,<br>SessionManager这三个接口。</p>
</li>
<li><p><strong>Authenticator：</strong>  Authenticator即认证器，对用户身份进行认证，Authenticator是一个接口，shiro提供ModularRealmAuthenticator实现类，通过ModularRealmAuthenticator基本上可以满足大多数需求，也可以自定义认证器。</p>
</li>
<li><p><strong>Authorizer：</strong>  Authorizer即授权器，用户通过认证器认证通过，在访问功能时需要通过授权器判断用户是否有此功能的操作权限。</p>
</li>
<li><p><strong>realm：</strong>  Realm即领域，相当于datasource数据源，securityManager进行安全认证需要通过Realm获取用户权限数据，比如：如果用户身份数据在数据库那么realm就需要从数据库获取用户身份信息。<br>注意：不要把realm理解成只是从数据源取数据，在realm中还有认证授权校验的相关的代码；</p>
</li>
<li><p><strong>sessionManager：</strong> sessionManager即会话管理，shiro框架定义了一套会话管理，它不依赖web容器的session，所以shiro可以使用在非web应用上，也可以将分布式应用的会话集中在一点管理，此特性可使它实现单点登录。</p>
</li>
<li><p><strong>SessionDAO：</strong> SessionDAO即会话dao，是对session会话操作的一套接口，比如要将session存储到数据库，可以通过jdbc将会话存储到数据库。</p>
</li>
<li><p><strong>CacheManager：</strong>  Cryptography即密码管理，shiro提供了一套加密/解密的组件，方便开发。比如提供常用的散列、加/解密等功能。</p>
</li>
</ul>
<h2 id="下载Shiro和maven的依赖"><a href="#下载Shiro和maven的依赖" class="headerlink" title="下载Shiro和maven的依赖"></a>下载Shiro和maven的依赖</h2><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200317094007.png" alt=""></p>
<h1 id="【掌握】Shiro-ini文件"><a href="#【掌握】Shiro-ini文件" class="headerlink" title="【掌握】Shiro.ini文件"></a>【掌握】Shiro.ini文件</h1><h2 id="main-定义全局变量"><a href="#main-定义全局变量" class="headerlink" title="[main] :定义全局变量"></a>[main] :定义全局变量</h2><pre><code>1 内置securityManager对象.
2 操作内置对象时,在[main]里面写东西:</code></pre><figure class="highlight"><table><tr><td class="code"><pre><span class="line">securityManager.属性=值     </span><br><span class="line">    myobj=com.bjsxt.lei    &lt;bean id=myobj class=” com.bjsxt.lei”&gt;</span><br><span class="line">    securityManager.对象属性=$myobj   &lt;bean id=” securityManager” class=””&gt;</span><br><span class="line">                                       &lt;property name=” 对象属性” ref=” myobj”&gt;</span><br></pre></td></tr></table></figure>

<h2 id="users-定义用户名和密码"><a href="#users-定义用户名和密码" class="headerlink" title="[users] :定义用户名和密码"></a>[users] :定义用户名和密码</h2><p>[users]</p>
<p>定义用户名为zhangsan 密码为zs</p>
<p>zhangsan=zs</p>
<p>定义用户名lisi密码为lisi同时具有role1和role2两个角色</p>
<p>lisi=lisi,role1,role2</p>
<h2 id="roles-定义角色"><a href="#roles-定义角色" class="headerlink" title="[roles]: 定义角色"></a>[roles]: 定义角色</h2><p>[roles]</p>
<p>role1=权限名1,权限名2 </p>
<p>role2=权限3,权限4</p>
<p>如</p>
<p>[roles]</p>
<p>role1=user:query,user:add,user:update,user:delete,user:export</p>
<p>role2=user:query,user:add</p>
<h2 id="urls-定义哪些内置urls生效-在web应用时使用"><a href="#urls-定义哪些内置urls生效-在web应用时使用" class="headerlink" title="[urls] : 定义哪些内置urls生效.在web应用时使用."></a>[urls] : 定义哪些内置urls生效.在web应用时使用.</h2><p>[urls]</p>
<p>#url地址=内置filter或自定义filter</p>
<p>访问时出现/login的url必须去认证.支持authc对应的Filter </p>
<p>/login=authc</p>
<p>任意的url都不需要进行认证等功能.</p>
<p>/** = anon</p>
<p>所有的内容都必须保证用户已经登录.</p>
<p>/**=user</p>
<p>url abc 访问时必须保证用户具有role1和role2角色.</p>
<p>/abc=roles[“role1,role2”]</p>
<p>authc   代表必须认证之后才能访问的路径</p>
<p>anon    任意的url都不需要进行认证等功能</p>
<p>user     所有的内容都必须保证用户已经登录.</p>
<p>logout   注销</p>
<p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200317095138.png" alt=""></p>
<h1 id="【掌握】Shiro实现认证-ini"><a href="#【掌握】Shiro实现认证-ini" class="headerlink" title="【掌握】Shiro实现认证_ini"></a>【掌握】Shiro实现认证_ini</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><p>即在应用中谁能证明他就是他本人。一般提供如他们的身份ID 一些标识信息来表明他就是他本人，如提供身份证，用户名/密码来证明。<br>在 shiro 中，用户需要提供principals （身份）和credentials（证明）给shiro，从而应用能<br>验证用户身份：</p>
<h3 id="principals-【-‘prɪnsəpl】"><a href="#principals-【-‘prɪnsəpl】" class="headerlink" title="principals 【/‘prɪnsəpl】"></a>principals 【/‘prɪnsəpl】</h3><p>身份，即主体的标识属性，可以是任何东西，如用户名、邮箱等，唯一即可。<br>一个主体可以有多个principals，但只有一个Primary principals，一般是用户名/密码/手机号。</p>
<h3 id="credentials-【-krə’denʃlz-】"><a href="#credentials-【-krə’denʃlz-】" class="headerlink" title="credentials 【/krə’dɛnʃlz/】"></a>credentials 【/krə’dɛnʃlz/】</h3><p>证明/凭证，即只有主体知道的安全值，如密码/数字证书等。<br>最常见的principals和credentials组合就是用户名/密码了。接下来先进行一个基本的身份认证。</p>
<h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200317095435.png" alt=""></p>
<h2 id="使用shiro的ini文件完成认证功能"><a href="#使用shiro的ini文件完成认证功能" class="headerlink" title="使用shiro的ini文件完成认证功能"></a>使用shiro的ini文件完成认证功能</h2><p><strong>创建项目并引入shiro-core的依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sxt.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01_shiro_Authentication_ini<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>创建log4j.properties</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Global logging configuration</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=DEBUG, stdout</span><br><span class="line"><span class="comment"># MyBatis logging configuration...</span></span><br><span class="line"><span class="attr">log4j.logger.org.mybatis.example.BlogMapper</span>=TRACE</span><br><span class="line"><span class="comment"># Console output...</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=org.apache.log4j.ConsoleAppender</span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=org.apache.log4j.PatternLayout</span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>=%<span class="number">5</span>p [%t] - %m%n</span><br></pre></td></tr></table></figure>
<p><strong>创建shiro.ini</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置用户</span></span><br><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">zhangsan</span>=<span class="number">123456</span></span><br><span class="line"><span class="attr">lisi</span>=<span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p><strong>创建TestAuthenticationApp测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * shiro的认证使用shiro.ini文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAuthenticationApp</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 日志输出工具</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> Logger log = LoggerFactory.getLogger(TestAuthenticationApp<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		String username = <span class="string">"zhangsan1"</span>;</span><br><span class="line">		String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">		log.info(<span class="string">"My First Apache Shiro Application"</span>);</span><br><span class="line">		<span class="comment">// 1，创建安全管理器的工厂对象 org.apache.shiro.mgt.SecurityManager;  不能使用java.lang.SecurityManager</span></span><br><span class="line">		Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">"classpath:shiro.ini"</span>);</span><br><span class="line">		<span class="comment">// 2,使用工厂创建安全管理器</span></span><br><span class="line">		SecurityManager securityManager = factory.getInstance();</span><br><span class="line">		<span class="comment">// 3,把当前的安全管理器绑定当到线的线程</span></span><br><span class="line">		SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">		<span class="comment">// 4,使用SecurityUtils.getSubject得到主体对象</span></span><br><span class="line">		Subject subject = SecurityUtils.getSubject();</span><br><span class="line">		<span class="comment">// 5，封装用户名和密码</span></span><br><span class="line">		AuthenticationToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">		<span class="comment">// 6,得到认证</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			subject.login(token);</span><br><span class="line">			System.out.println(<span class="string">"认证通过"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">			System.out.println(<span class="string">"用户名或密码不正确"</span>);</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="comment">/*&#125; catch (IncorrectCredentialsException e) &#123;</span></span><br><span class="line"><span class="comment">			System.out.println("密码不正确");</span></span><br><span class="line"><span class="comment">		&#125; catch (UnknownAccountException e) &#123;</span></span><br><span class="line"><span class="comment">			System.out.println("用户名不存在");</span></span><br><span class="line"><span class="comment">		&#125;*/</span></span><br><span class="line">		</span><br><span class="line">		Subject subject2 = SecurityUtils.getSubject();</span><br><span class="line">		</span><br><span class="line">		System.out.println(subject);</span><br><span class="line">		System.out.println(subject2);</span><br><span class="line">		</span><br><span class="line">		aaaa();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">aaaa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Subject subject2 = SecurityUtils.getSubject();</span><br><span class="line">		System.out.println(subject2);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="【掌握】shiro-ini实现授权"><a href="#【掌握】shiro-ini实现授权" class="headerlink" title="【掌握】shiro.ini实现授权"></a>【掌握】shiro.ini实现授权</h1><p>前提：必须先认证通过之后有授权之说</p>
<h2 id="授权概述"><a href="#授权概述" class="headerlink" title="授权概述"></a>授权概述</h2><p>授权，也叫访问控制，即在应用中控制谁能访问哪些资源（如访问页面/编辑数据/页面操作等）。在授权中需了解的几个关键对象：主体（Subject）、资源（Resource）、权限（Permission）、角色（Role）。</p>
<h2 id="关键对象介绍"><a href="#关键对象介绍" class="headerlink" title="关键对象介绍"></a>关键对象介绍</h2><p> <strong>主体</strong><br>主体，即访问应用的用户，在Shiro中使用Subject代表该用户。用户只有授权后才允许访问相应的资源。<br><strong>资源</strong><br>在应用中用户可以访问的任何东西，比如访问JSP 页面、查看/编辑某些数据、访问某个业务方法、打印文本等等都是资源。用户只要授权后才能访问。<br><strong>权限</strong><br>安全策略中的原子授权单位，通过权限我们可以表示在应用中用户有没有操作某个资源的权力。即权限表示在应用中用户能不能访问某个资源，如：访问用户列表页面查看/新增/修改/删除用户数据（即很多时候都是CRUD（增查改删）式权限控制）打印文档等等。。。<br><strong>角色</strong><br>角色代表了操作集合，可以理解为权限的集合，一般情况下我们会赋予用户角色而不是权限，即这样用户可以拥有一组权限，赋予权限时比较方便。典型的如：项目经理、技术总监、CTO、开发工程师等都是角色，不同的角色拥有一组不同的权限。</p>
<h2 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h2><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200317101445.png" alt=""></p>
<h2 id="相关方法说明"><a href="#相关方法说明" class="headerlink" title="相关方法说明"></a>相关方法说明</h2><ul>
<li>subject.hasRole(“”); 判断是否有角色</li>
<li>subject.hashRoles(List);分别判断用户是否具有List中每个内容</li>
<li>subject.hasAllRoles(Collection);返回boolean,要求参数中所有角色用户都需要具有.</li>
<li>subject.isPermitted(“”);判断是否具有权限.</li>
</ul>
<h2 id="修改shiro-ini"><a href="#修改shiro-ini" class="headerlink" title="修改shiro.ini"></a>修改shiro.ini</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置用户</span></span><br><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">zhangsan</span>=<span class="number">123456</span>,role1</span><br><span class="line"><span class="attr">lisi</span>=<span class="number">123456</span>,role2</span><br><span class="line"><span class="attr">wangwu</span>=<span class="number">123456</span>,role3</span><br><span class="line"><span class="attr">zhaoliu</span>=<span class="number">123456</span>,role2,role3</span><br><span class="line"></span><br><span class="line"><span class="comment">#声明角色</span></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="attr">role1</span>=user:query,user:add,user:update,user:delete,user:export</span><br><span class="line"><span class="attr">role2</span>=user:query,user:add</span><br><span class="line"><span class="attr">role3</span>=user:query,user:export</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * shiro的认证使用shiro.ini文件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAuthorizationApp</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 日志输出工具</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> Logger log = LoggerFactory.getLogger(TestAuthorizationApp<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		String username = <span class="string">"sunqi"</span>;</span><br><span class="line">		String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">		log.info(<span class="string">"My First Apache Shiro Application"</span>);</span><br><span class="line">		<span class="comment">// 1，创建安全管理器的工厂对象 org.apache.shiro.mgt.SecurityManager;  不能使用java.lang.SecurityManager</span></span><br><span class="line">		Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">"classpath:shiro.ini"</span>);</span><br><span class="line">		<span class="comment">// 2,使用工厂创建安全管理器</span></span><br><span class="line">		SecurityManager securityManager = factory.getInstance();</span><br><span class="line">		<span class="comment">// 3,把当前的安全管理器绑定当到线的线程</span></span><br><span class="line">		SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">		<span class="comment">// 4,使用SecurityUtils.getSubject得到主体对象</span></span><br><span class="line">		Subject subject = SecurityUtils.getSubject();</span><br><span class="line">		<span class="comment">// 5，封装用户名和密码</span></span><br><span class="line">		AuthenticationToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">		<span class="comment">// 6,得到认证</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			subject.login(token);</span><br><span class="line">			System.out.println(<span class="string">"认证通过"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">			System.out.println(<span class="string">"用户名或密码不正确"</span>);</span><br><span class="line">		&#125; </span><br><span class="line">		</span><br><span class="line">		<span class="comment">//subject.logout();//退出的方法</span></span><br><span class="line">		<span class="comment">//判断用户是否认证通过</span></span><br><span class="line">		<span class="keyword">boolean</span> authenticated = subject.isAuthenticated();</span><br><span class="line">		System.out.println(<span class="string">"是否认证通过:"</span>+authenticated);</span><br><span class="line">		<span class="comment">//角色判断</span></span><br><span class="line">		<span class="keyword">boolean</span> hasRole1 = subject.hasRole(<span class="string">"role1"</span>);</span><br><span class="line">		System.out.println(<span class="string">"是否有role1的角色:"</span>+hasRole1);</span><br><span class="line">		<span class="comment">//分别判断集合里面的角色 返回数组</span></span><br><span class="line">		List&lt;String&gt; roleIdentifiers=Arrays.asList(<span class="string">"role1"</span>,<span class="string">"role2"</span>,<span class="string">"role3"</span>);</span><br><span class="line">		<span class="keyword">boolean</span>[] hasRoles = subject.hasRoles(roleIdentifiers);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">boolean</span> b : hasRoles) &#123;</span><br><span class="line">			System.out.println(b);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//判断当前用户是否有roleIdentifiers集合里面的所有角色</span></span><br><span class="line">		<span class="keyword">boolean</span> hasAllRoles = subject.hasAllRoles(roleIdentifiers);</span><br><span class="line">		System.out.println(hasAllRoles);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//权限判断</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">boolean</span> permitted = subject.isPermitted(<span class="string">"user:query"</span>);</span><br><span class="line">		System.out.println(<span class="string">"判断当前用户是否有user:query的权限  "</span>+permitted);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">boolean</span>[] permitted2 = subject.isPermitted(<span class="string">"user:query"</span>,<span class="string">"user:add"</span>,<span class="string">"user:export"</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">boolean</span> b : permitted2) &#123;</span><br><span class="line">			System.out.println(b);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">boolean</span> permittedAll = subject.isPermittedAll(<span class="string">"user:query"</span>,<span class="string">"user:add"</span>,<span class="string">"user:export"</span>);</span><br><span class="line">		System.out.println(permittedAll);</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="【掌握】自定义Realm实现认证"><a href="#【掌握】自定义Realm实现认证" class="headerlink" title="【掌握】自定义Realm实现认证"></a>【掌握】自定义Realm实现认证</h1><p>Shiro默认使用自带的<code>IniRealm</code>，<code>IniRealm</code>从ini配置文件中读取用户的信息，大部分情况下需要从系统的数据库中读取用户信息，所以需要自定义realm。<br>最基础的是<code>Realm</code>接口，<code>CachingRealm</code>负责缓存处理，<code>AuthenticationRealm</code>负责认证,<code>AuthorizingRealm</code>负责授权，通常自定义的<code>realm</code>继承<code>AuthorizingRealm</code></p>
<h2 id="创建UserRealm"><a href="#创建UserRealm" class="headerlink" title="创建UserRealm"></a>创建UserRealm</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthenticatingRealm</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> UserService userService=<span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 做认证</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">		String username=token.getPrincipal().toString();</span><br><span class="line">		token.getCredentials();</span><br><span class="line">		System.out.println(username);</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 以前登陆的逻辑是  把用户和密码全部发到数据库  去匹配</span></span><br><span class="line"><span class="comment">		 * 在shrio里面是先根据用户名把用户对象查询出来，再来做密码匹配</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		User user=userService.queryUserByUserName(username);</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">null</span>!=user) &#123;</span><br><span class="line">			<span class="comment">/**</span></span><br><span class="line"><span class="comment">			 * 参数说明</span></span><br><span class="line"><span class="comment">			 * 参数1:可以传到任意对象</span></span><br><span class="line"><span class="comment">			 * 参数2:从数据库里面查询出来的密码</span></span><br><span class="line"><span class="comment">			 * 参数3:当前类名</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			SimpleAuthenticationInfo info=<span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getPwd(), <span class="keyword">this</span>.getName());</span><br><span class="line">			<span class="keyword">return</span> info;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//用户不存在  shiro会抛 UnknowAccountException</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="修改shiro-ini-1"><a href="#修改shiro-ini-1" class="headerlink" title="修改shiro.ini"></a>修改shiro.ini</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[main]</span></span><br><span class="line"><span class="comment">#创建userRealm对象</span></span><br><span class="line"><span class="attr">userRealm</span>=com.sxt.realm.UserRealm</span><br><span class="line"><span class="comment">#把当前对象给安全管理器</span></span><br><span class="line"><span class="comment">#securityManager=org.apache.shiro.mgt.DefaultSecurityManager</span></span><br><span class="line"><span class="attr">securityManager.realm</span>=<span class="variable">$userRealm</span></span><br></pre></td></tr></table></figure>
<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * shiro的认证使用shiro.ini文件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAuthenticationApp</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 日志输出工具</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> Logger log = LoggerFactory.getLogger(TestAuthenticationApp<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		String username = <span class="string">"zhangsan"</span>;</span><br><span class="line">		String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">		log.info(<span class="string">"My First Apache Shiro Application"</span>);</span><br><span class="line">		<span class="comment">// 1，创建安全管理器的工厂对象 org.apache.shiro.mgt.SecurityManager;</span></span><br><span class="line">		<span class="comment">// 不能使用java.lang.SecurityManager</span></span><br><span class="line">		Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">"classpath:shiro.ini"</span>);</span><br><span class="line">		<span class="comment">// 2,使用工厂创建安全管理器</span></span><br><span class="line">		DefaultSecurityManager securityManager = (DefaultSecurityManager) factory.getInstance();</span><br><span class="line">		<span class="comment">// 3,创建UserRealm</span></span><br><span class="line"><span class="comment">//		UserRealm realm = new UserRealm();</span></span><br><span class="line">		<span class="comment">// 4,给securityManager注入userRealm</span></span><br><span class="line"><span class="comment">//		securityManager.setRealm(realm);</span></span><br><span class="line">		<span class="comment">// 6,把当前的安全管理器绑定当到线的线程</span></span><br><span class="line">		SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">		<span class="comment">// 7,使用SecurityUtils.getSubject得到主体对象</span></span><br><span class="line">		Subject subject = SecurityUtils.getSubject();</span><br><span class="line">		<span class="comment">// 8，封装用户名和密码</span></span><br><span class="line">		AuthenticationToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">		<span class="comment">// 9,得到认证</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			subject.login(token);</span><br><span class="line">			System.out.println(<span class="string">"认证通过"</span>);</span><br><span class="line">			</span><br><span class="line">			Object principal = subject.getPrincipal();</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			System.out.println(principal);</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">			System.out.println(<span class="string">"密码不正确"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">			System.out.println(<span class="string">"用户名不存在"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="【掌握】自定义Realm实现授权"><a href="#【掌握】自定义Realm实现授权" class="headerlink" title="【掌握】自定义Realm实现授权"></a>【掌握】自定义Realm实现授权</h1><h2 id="修改UserRealm"><a href="#修改UserRealm" class="headerlink" title="修改UserRealm"></a>修改UserRealm</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> UserService userService=<span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> RoleService roleService =<span class="keyword">new</span> RoleServiceImpl();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> PermissionService permissionService=<span class="keyword">new</span> PermissionServiceImpl();</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 做认证</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">		String username=token.getPrincipal().toString();</span><br><span class="line">		token.getCredentials();</span><br><span class="line">		System.out.println(username);</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 以前登陆的逻辑是  把用户和密码全部发到数据库  去匹配</span></span><br><span class="line"><span class="comment">		 * 在shrio里面是先根据用户名把用户对象查询出来，再来做密码匹配</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		User user=userService.queryUserByUserName(username);</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">null</span>!=user) &#123;</span><br><span class="line">			List&lt;String&gt; roles=roleService.queryRoleByUserName(user.getUsername());</span><br><span class="line">			</span><br><span class="line">			List&lt;String&gt; permissions=permissionService.queryPermissionByUserName(user.getUsername());</span><br><span class="line">			ActiverUser activerUser=<span class="keyword">new</span> ActiverUser(user, roles, permissions);</span><br><span class="line">			<span class="comment">/**</span></span><br><span class="line"><span class="comment">			 * 参数说明</span></span><br><span class="line"><span class="comment">			 * 参数1:可以传到任意对象</span></span><br><span class="line"><span class="comment">			 * 参数2:从数据库里面查询出来的密码</span></span><br><span class="line"><span class="comment">			 * 参数3:当前类名</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			SimpleAuthenticationInfo info=<span class="keyword">new</span> SimpleAuthenticationInfo(activerUser, user.getPwd(), <span class="keyword">this</span>.getName());</span><br><span class="line">			<span class="keyword">return</span> info;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//用户不存在  shiro会抛 UnknowAccountException</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 作授权</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * 参数说明</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">		ActiverUser activerUser = (ActiverUser) principals.getPrimaryPrincipal();</span><br><span class="line">		SimpleAuthorizationInfo info=<span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">		<span class="comment">//添加角色</span></span><br><span class="line">		Collection&lt;String&gt; roles=activerUser.getRoles();</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">null</span>!=roles&amp;&amp;roles.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">			info.addRoles(roles);</span><br><span class="line">		&#125;</span><br><span class="line">		Collection&lt;String&gt; permissions=activerUser.getPermissions();</span><br><span class="line">		<span class="comment">//添加权限</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">null</span>!=permissions&amp;&amp;permissions.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">			info.addStringPermissions(permissions);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		if(activerUser.getUser().getType()==0) &#123;</span></span><br><span class="line"><span class="comment">//			info.addStringPermission("*:*");</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line">		<span class="keyword">return</span> info;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="【掌握】散列算法-凭证配置"><a href="#【掌握】散列算法-凭证配置" class="headerlink" title="【掌握】散列算法+凭证配置"></a>【掌握】散列算法+凭证配置</h1><h2 id="散列算法"><a href="#散列算法" class="headerlink" title="散列算法"></a>散列算法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Utils</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String source=<span class="string">"123456"</span>;</span><br><span class="line">		Md5Hash hash1=<span class="keyword">new</span> Md5Hash(source);</span><br><span class="line">		System.out.println(<span class="string">"使用MD5加密后的结果:"</span>+hash1.toString());</span><br><span class="line">		</span><br><span class="line">		Md5Hash hash2=<span class="keyword">new</span> Md5Hash(source, <span class="string">"北京武汉"</span>); </span><br><span class="line">		System.out.println(<span class="string">"使用MD5加密并加盐后的结果:"</span>+hash2.toString());</span><br><span class="line">		Md5Hash hash3=<span class="keyword">new</span> Md5Hash(source, <span class="string">"北京武汉"</span>, <span class="number">2</span>);</span><br><span class="line">		System.out.println(<span class="string">"使用MD5加密加盐并散列两次后的结果:"</span>+hash3.toString());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 对密码加密 md5</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> source  要加密的明文</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> salt  盐</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> hashIterations  散列次数</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String source, Object salt, Integer hashIterations)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Md5Hash(source, salt, hashIterations).toString();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 对密码加密sha1</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> source  要加密的明文</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> salt  盐</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> hashIterations  散列次数</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sha1</span><span class="params">(String source, Object salt, Integer hashIterations)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Sha1Hash(source, salt, hashIterations).toString();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="SpringBoot与Shiro整合-权限管理实战"><a href="#SpringBoot与Shiro整合-权限管理实战" class="headerlink" title="SpringBoot与Shiro整合-权限管理实战"></a>SpringBoot与Shiro整合-权限管理实战</h1><h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><p><strong>分析Shiro的核心API</strong></p>
<p>Subject： 用户主体（把操作交给SecurityManager）</p>
<p>SecurityManager：安全管理器（关联Realm）</p>
<p>Realm：Shiro连接数据的桥梁</p>
<p><strong>导入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;u&gt;shiro&lt;/u&gt;与spring整合依赖 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;<span class="name">u</span>&gt;</span>shiro<span class="tag">&lt;/<span class="name">u</span>&gt;</span>-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>自定义Realm</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bin.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Realm</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 执行授权逻辑</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection arg0)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行授权逻辑"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 执行认证逻辑</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken arg0)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行认证逻辑"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>shiro基本配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bin.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shiro的配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 创建ShiroFilterFactoryBean</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(@Qualifier(<span class="string">"securityManager"</span>)</span>DefaultWebSecurityManager securityManager)</span>&#123;</span><br><span class="line">		ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//设置安全管理器</span></span><br><span class="line">		shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 创建DefaultWebSecurityManager</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span>(name=<span class="string">"securityManager"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManager</span><span class="params">(@Qualifier(<span class="string">"userRealm"</span>)</span>UserRealm userRealm)</span>&#123;</span><br><span class="line">		DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">		<span class="comment">//关联realm</span></span><br><span class="line">		securityManager.setRealm(userRealm);</span><br><span class="line">		<span class="keyword">return</span> securityManager;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 创建Realm</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span>(name=<span class="string">"userRealm"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> UserRealm <span class="title">getRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> UserRealm();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用Shiro内置过滤器实现页面拦截</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bin.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shiro的配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 创建ShiroFilterFactoryBean</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(@Qualifier(<span class="string">"securityManager"</span>)</span>DefaultWebSecurityManager securityManager)</span>&#123;</span><br><span class="line">		ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//设置安全管理器</span></span><br><span class="line">		shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//添加Shiro内置过滤器</span></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * Shiro内置过滤器，可以实现权限相关的拦截器</span></span><br><span class="line"><span class="comment">		 *    常用的过滤器：</span></span><br><span class="line"><span class="comment">		 *       anon: 无需认证（登录）可以访问</span></span><br><span class="line"><span class="comment">		 *       authc: 必须认证才可以访问</span></span><br><span class="line"><span class="comment">		 *       user: 如果使用rememberMe的功能可以直接访问</span></span><br><span class="line"><span class="comment">		 *       perms： 该资源必须得到资源权限才可以访问</span></span><br><span class="line"><span class="comment">		 *       role: 该资源必须得到角色权限才可以访问</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		Map&lt;String,String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;String,String&gt;();</span><br><span class="line">		<span class="comment">/*filterMap.put("/add", "authc");</span></span><br><span class="line"><span class="comment">		filterMap.put("/update", "authc");*/</span></span><br><span class="line">		</span><br><span class="line">		filterMap.put(<span class="string">"/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">		</span><br><span class="line">		filterMap.put(<span class="string">"/*"</span>, <span class="string">"authc"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//修改调整的登录页面</span></span><br><span class="line">		shiroFilterFactoryBean.setLoginUrl(<span class="string">"/toLogin"</span>);</span><br><span class="line">		</span><br><span class="line">		shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 创建DefaultWebSecurityManager</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span>(name=<span class="string">"securityManager"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManager</span><span class="params">(@Qualifier(<span class="string">"userRealm"</span>)</span>UserRealm userRealm)</span>&#123;</span><br><span class="line">		DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">		<span class="comment">//关联realm</span></span><br><span class="line">		securityManager.setRealm(userRealm);</span><br><span class="line">		<span class="keyword">return</span> securityManager;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 创建Realm</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span>(name=<span class="string">"userRealm"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> UserRealm <span class="title">getRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> UserRealm();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现用户认证（登录）操作"><a href="#实现用户认证（登录）操作" class="headerlink" title="实现用户认证（登录）操作"></a>实现用户认证（登录）操作</h2><p><strong>设计登录页面</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">	用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>编写Controller的登录逻辑</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录逻辑处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String name,String password,Model model)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 使用Shiro编写认证操作</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="comment">//1.获取Subject</span></span><br><span class="line">	Subject subject = SecurityUtils.getSubject();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//2.封装用户数据</span></span><br><span class="line">	UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(name,password);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.执行登录方法</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		subject.login(token);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//登录成功</span></span><br><span class="line">		<span class="comment">//跳转到test.html</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">"redirect:/testThymeleaf"</span>;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">		<span class="comment">//e.printStackTrace();</span></span><br><span class="line">		<span class="comment">//登录失败:用户名不存在</span></span><br><span class="line">		model.addAttribute(<span class="string">"msg"</span>, <span class="string">"用户名不存在"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">	&#125;<span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">		<span class="comment">//e.printStackTrace();</span></span><br><span class="line">		<span class="comment">//登录失败:密码错误</span></span><br><span class="line">		model.addAttribute(<span class="string">"msg"</span>, <span class="string">"密码错误"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>编写Realm的判断逻辑</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bin.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Realm</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 执行授权逻辑</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection arg0)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行授权逻辑"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 执行认证逻辑</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken arg0)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行认证逻辑"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//假设数据库的用户名和密码</span></span><br><span class="line">		String name = <span class="string">"eric"</span>;</span><br><span class="line">		String password = <span class="string">"123456"</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//编写shiro判断逻辑，判断用户名和密码</span></span><br><span class="line">		<span class="comment">//1.判断用户名</span></span><br><span class="line">		UsernamePasswordToken token = (UsernamePasswordToken)arg0;</span><br><span class="line">		<span class="keyword">if</span>(!token.getUsername().equals(name))&#123;</span><br><span class="line">			<span class="comment">//用户名不存在</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">//shiro底层会抛出UnKnowAccountException</span></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2.判断密码</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(<span class="string">""</span>,password,<span class="string">""</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="整合MyBatis实现登录"><a href="#整合MyBatis实现登录" class="headerlink" title="整合MyBatis实现登录"></a>整合MyBatis实现登录</h2><p><strong>导入mybatis相关的依赖</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 导入mybatis相关的依赖 --&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class="line">			&lt;version&gt;1.0.9&lt;&#x2F;version&gt;</span><br><span class="line">		&lt;&#x2F;dependency&gt;</span><br><span class="line">		&lt;!-- mysql --&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">		&lt;&#x2F;dependency&gt;</span><br><span class="line">		&lt;!-- SpringBoot的Mybatis启动器 --&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">			&lt;version&gt;1.1.1&lt;&#x2F;version&gt;</span><br><span class="line">		&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p><strong>配置application.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.bin.domain</span></span><br></pre></td></tr></table></figure>
<p><strong>编写User实体</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bin.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>编写UserMapper接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bin.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bin.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>编写UserMapper.xml映射文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 该文件存放CRUD的sql语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByName"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">	SELECT 	id, </span><br><span class="line">		NAME, </span><br><span class="line">		PASSWORD</span><br><span class="line">		FROM </span><br><span class="line">		user where name = #&#123;value&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>编写业务接口和实现</strong><br>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bin.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bin.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bin.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.bin.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.bin.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//注入Mapper接口</span></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userMapper.findByName(name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>主程序添加@MapperScan注解</strong><br><strong>修改UserRealm</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bin.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bin.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.bin.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Realm</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 执行授权逻辑</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection arg0)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行授权逻辑"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserService userSerivce;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 执行认证逻辑</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken arg0)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行认证逻辑"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//编写shiro判断逻辑，判断用户名和密码</span></span><br><span class="line">		<span class="comment">//1.判断用户名</span></span><br><span class="line">		UsernamePasswordToken token = (UsernamePasswordToken)arg0;</span><br><span class="line">		</span><br><span class="line">		User user = userSerivce.findByName(token.getUsername());</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="comment">//用户名不存在</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">//shiro底层会抛出UnKnowAccountException</span></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2.判断密码</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(<span class="string">""</span>,user.getPassword(),<span class="string">""</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Spring-Boot与Shiro整合实现用户授权"><a href="#Spring-Boot与Shiro整合实现用户授权" class="headerlink" title="Spring Boot与Shiro整合实现用户授权"></a><strong>Spring Boot与Shiro整合实现用户授权</strong></h2><p><strong>使用Shiro内置过滤器拦截资源</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 创建ShiroFilterFactoryBean</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(@Qualifier(<span class="string">"securityManager"</span>)</span>DefaultWebSecurityManager securityManager)</span>&#123;</span><br><span class="line">		ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//设置安全管理器</span></span><br><span class="line">		shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//添加Shiro内置过滤器</span></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * Shiro内置过滤器，可以实现权限相关的拦截器</span></span><br><span class="line"><span class="comment">		 *    常用的过滤器：</span></span><br><span class="line"><span class="comment">		 *       anon: 无需认证（登录）可以访问</span></span><br><span class="line"><span class="comment">		 *       authc: 必须认证才可以访问</span></span><br><span class="line"><span class="comment">		 *       user: 如果使用rememberMe的功能可以直接访问</span></span><br><span class="line"><span class="comment">		 *       perms： 该资源必须得到资源权限才可以访问</span></span><br><span class="line"><span class="comment">		 *       role: 该资源必须得到角色权限才可以访问</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		Map&lt;String,String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;String,String&gt;();</span><br><span class="line">		<span class="comment">/*filterMap.put("/add", "authc");</span></span><br><span class="line"><span class="comment">		filterMap.put("/update", "authc");*/</span></span><br><span class="line">		</span><br><span class="line">		filterMap.put(<span class="string">"/testThymeleaf"</span>, <span class="string">"anon"</span>);</span><br><span class="line">		<span class="comment">//放行login.html页面</span></span><br><span class="line">		filterMap.put(<span class="string">"/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//授权过滤器</span></span><br><span class="line">		<span class="comment">//注意：当前授权拦截后，shiro会自动跳转到未授权页面</span></span><br><span class="line">		filterMap.put(<span class="string">"/add"</span>, <span class="string">"perms[user:add]"</span>);</span><br><span class="line">		</span><br><span class="line">		filterMap.put(<span class="string">"/*"</span>, <span class="string">"authc"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//修改调整的登录页面</span></span><br><span class="line">		shiroFilterFactoryBean.setLoginUrl(<span class="string">"/toLogin"</span>);</span><br><span class="line">		<span class="comment">//设置未授权提示页面</span></span><br><span class="line">		shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">"/noAuth"</span>);</span><br><span class="line">		</span><br><span class="line">		shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><strong>完成Shiro的资源授权</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserRealm：</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 执行授权逻辑</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection arg0)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行授权逻辑"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//给资源进行授权</span></span><br><span class="line">		SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//添加资源的授权字符串</span></span><br><span class="line">		info.addStringPermission(<span class="string">"user:add"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> info;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 框架</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2020/03/11/SpringBoot/</url>
    <content><![CDATA[<h1 id="SpringBoot入门"><a href="#SpringBoot入门" class="headerlink" title="SpringBoot入门"></a>SpringBoot入门</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>SpringBoot之前</strong><br>J2EE笨重的开发、繁多的配置、低下的开发效率、 复杂的部署流程、第三方技术集成难度大。</p>
<p><strong>SpringBoot的优点</strong></p>
<ol>
<li>快速创建独立运行的Spring项目以及与主流框架集成</li>
<li>使用嵌入式的Servlet容器，应用无需打成WAR包</li>
<li>starters自动依赖与版本控制</li>
<li>大量的自动配置，简化开发，也可修改默认值</li>
<li>无需配置XML，无代码生成，开箱即用</li>
<li>准生产环境的运行时应用监控</li>
<li>与云计算的天然集成<a id="more"></a>

</li>
</ol>
<p><strong>微服务</strong><br>Spring官方介绍：<br>Microservices are a modern approach to software whereby application code is delivered in small, manageable pieces, independent of others.<br>微服务是软件的一种现代方法，应用程序代码以小的、可管理的部分交付，独立于其他部分。</p>
<p><strong>Martin fowler</strong><br>简而言之，微服务体系结构风格是一种将单个应用程序作为一组小服务来开发的方法，每个小服务都在自己的进程中运行，并与轻量级机制(通常是HTTP资源API)进行通信。这些服务是围绕业务功能构建的，可以通过完全自动化的部署机制独立部署。这些服务的集中管理很少，可能使用不同的编程语言编写并使用不同的数据存储技术。<br>—詹姆斯·刘易斯和马丁·福勒(2014)<br>微服务介绍：<a href="http://blog.cuicc.com/blog/2015/07/22/microservices/" target="_blank" rel="noopener">http://blog.cuicc.com/blog/2015/07/22/microservices/</a></p>
<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>JDK1.8及以上版本<br>Maven3.0及以上版本<br>    -maven的setting.xml文件中加入以下配置 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>开发工具IDEA<br>SpringBoot2.2.5RELASES</p>
<h3 id="HelloWorld-1"><a href="#HelloWorld-1" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><p><strong>创建maven工程</strong><br><strong>在pom.xml加入依赖配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>创建一个类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//是有@Controller @ResponseBody组成，修饰类时表示类中所有受理请求方法都返回json数据</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">//这个注解修饰的类表示是一个SpringBoot的主入口类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">        <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">        <span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SpringApplication.run(HelloWorld<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行主程序访问localhost:8080</strong><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200311110302.png" alt=""></p>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p><strong>在pom.xml配置中加入以下打包插件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringBoot打包插件，帮助将SpringBoot打包成一个jar--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>使用maven的方式打包</strong><br><strong>使用java -jar指令运行</strong></p>
<h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><h3 id="pom-xml文件"><a href="#pom-xml文件" class="headerlink" title="pom.xml文件"></a>pom.xml文件</h3><p><strong>导入父工程</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot  ==&gt; SpringBoot版本仲裁中心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>spring-boot-starter-parent ==&gt; spring-boot-dependencies</p>
<p><strong>导入starters依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>SpringBoot场景启动器：<br><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/html/using-spring-boot.html#using-boot-starter" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/html/using-spring-boot.html#using-boot-starter</a><br>SpringBoot将所有开发中可能使用到的场景提取出来，做成了一个一个的starters(启动器)，在SpringBoot中使用什么场景，就导入什么starter，最终给我们自动导入依赖。</p>
<h3 id="主程序类"><a href="#主程序类" class="headerlink" title="主程序类"></a>主程序类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)<span class="comment">//原注解，修饰注解的注解,TYPE表示只能修饰类</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)<span class="comment">//表示生命周期，什么时候有效什么时候无效。RUNTIME表示运行时有效</span></span><br><span class="line"><span class="meta">@Documented</span><span class="comment">//表示生成文档可以显示注解信息</span></span><br><span class="line"><span class="meta">@Inherited</span><span class="comment">//表示注解会不会继承</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span><span class="comment">//当前被注解修饰的类是Spring的配置类，可见（代码3.1）</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span><span class="comment">//开启自动配置，可见（代码3.2）</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = &#123;TypeExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;), @<span class="title">Filter</span>( <span class="title">type</span> </span>= FilterType.CUSTOM, classes = &#123;AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;)&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>@SpringBootConfiguration （代码3.1）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//表示修饰类的一个配置类，相当于以前的配置文件，其内部有@Componet使得其会被扫描到</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>@EnableAutoConfiguration （代码3.2）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span><span class="comment">//自动配置包，可见（代码3.3）</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>)//给容器导入组件，可见（代码3.5）</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>@AutoConfigurationPackage （代码3.3）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationPackages.Registrar<span class="class">.<span class="keyword">class</span>)//<span class="title">Spring</span>底层注解，给容器中导入（）中的组件，可见（代码3.4）</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">AutoConfigurationPackage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Registra （代码3.4）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//静态内部类，目的是将被该注释修饰类对应包下的组件自动扫描到IOC容器中</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">      <span class="comment">//该方法获取主程序所在的包</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">		register(registry, <span class="keyword">new</span> PackageImport(metadata).getPackageName());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> PackageImport(metadata));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>AutoConfigurationImportSelector （代码3.5）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动配置导入选择器，给容器导入很多自动配置类</span></span><br><span class="line"><span class="comment">//原理：加载类路径下的META-INF/spring.factories文件中的EnableAutoConfiguration注解全类名对应的值。</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">			<span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">		&#125;</span><br><span class="line">		AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader</span><br><span class="line">				.loadMetadata(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">		AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(autoConfigurationMetadata,</span><br><span class="line">				annotationMetadata);</span><br><span class="line">		<span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用SpringBoot快速向导创建项目"><a href="#使用SpringBoot快速向导创建项目" class="headerlink" title="使用SpringBoot快速向导创建项目"></a>使用SpringBoot快速向导创建项目</h2><p>第一步：</p>
<p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200312092523.png" alt=""></p>
<p>第二步：<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200312095046.png" alt=""></p>
<p>第三步：<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200312095455.png" alt=""></p>
<p>第四步：<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200312092907.png" alt=""></p>
<p>快速向导创建项目的特点</p>
<ul>
<li>自动在配置文件中加入选择好的starters</li>
<li>自动创建springboot主程序</li>
<li>创建static文件夹 —&gt; 用来存放静态资源</li>
<li>创建template文件夹 —&gt; 用来存放模板文件</li>
<li>创建application.properties —&gt; SpringBoot的配置文件,可以改变SpringBoot给我们做的自动配置</li>
</ul>
<h1 id="SpringBoot的配置"><a href="#SpringBoot的配置" class="headerlink" title="SpringBoot的配置"></a>SpringBoot的配置</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><strong>SpringBoot的全局配置文件</strong></p>
<blockquote>
<p>包含以下两个，可以改变SpringBoot给我们做的自动配置：<br>application.properties(快速向导中自动创建好的)<br>application.yml</p>
</blockquote>
<p><strong>yml</strong></p>
<blockquote>
<p>yml是YAML<br>Ain’t Markup luanguage 是一门标记语言，传统的配置文件大部分都是XML的形式而YML以数据为中心，更适合做配置文件</p>
</blockquote>
<p>YML基本语法：<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200312171504.png" alt=""></p>
<p>YML支持的数据类型：<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200312114704.png" alt=""></p>
<p><strong>配置文件中值的获取</strong></p>
<p>@ConfigurationProperties注解：<br>@ConfigurationProperties告诉SpringBoot本类中的所有属性和配置文件中相关配置进行映射prefix属性：配置文件中的那个属性一一映射。该注解只能在Spring容器中生效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Value注解：<br>@Value注解可以注入一个值给属性，也可以是配置文件中配置的值。注意，使用@Value注解注入配置文件中属性的值时，需要使用${}的形式注入，还支持SpEL #{}。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">'$&#123;person.name&#125;'</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;2*11&#125;"</span>)</span><br><span class="line">     <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@ConfigurationProperties与@Value比较</strong><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200312115443.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Validated</span><span class="comment">//如果要对实体类中的属性进行JSR303数据校验，必须加上当前注解。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@PropertySource</strong></p>
<blockquote>
<p>导入指定配置文件中数据到类中<br>需结合@ConfigurationProperties或@Value注解使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:person.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p><strong>使用xml配置</strong></p>
<blockquote>
<p>springboot中无法直接使用xml配置文件，若要使用配置文件可进行以下两个操作：</p>
</blockquote>
<ul>
<li>在主程序上使用@ImportResource注解使得xml配置生效</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(location=&#123;<span class="string">"classpath:application.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot01QuickApplication</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>SpringBoot推荐使用的方式，配置类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//定义配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123; </span><br><span class="line"><span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名 </span></span><br><span class="line">    <span class="meta">@Bean</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService02</span><span class="params">()</span></span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"配置类@Bean给容器中添加组件了..."</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置文件占位符</strong></p>
<ul>
<li><p>随机数</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">$&#123;random.value&#125;</span></span><br><span class="line"><span class="attr">$&#123;random.int&#125;</span></span><br><span class="line"><span class="meta">$&#123;random.long&#125;</span> <span class="string"></span></span><br><span class="line"><span class="comment"> #0-10之间某一个值</span></span><br><span class="line"><span class="attr">$&#123;random.int(10)&#125;</span></span><br><span class="line"><span class="attr">$&#123;random.int[1024,65536]&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>属性值</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $&#123;person.name&#125;获取属性值</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">lastName:</span> <span class="string">tom</span></span><br><span class="line">  <span class="attr">pets:</span></span><br><span class="line">     <span class="comment">#tom_cat</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">$&#123;person.name&#125;_cat</span>  </span><br><span class="line">      <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">        <span class="comment">#指定默认值，若$&#123;person.name&#125;没有值则默认值生效，TOM_dog</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">$&#123;person.name:TOM&#125;_dog</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pig</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>Profile</strong><br>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml<br>默认使用application.properties的配置；</p>
<p>yml支持多文档块的方式：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">   <span class="attr">port:</span> <span class="number">8081</span> </span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">   <span class="attr">profiles:</span> </span><br><span class="line">   <span class="comment">#指定激活哪一个profile</span></span><br><span class="line">      <span class="attr">active:</span> <span class="string">prod</span> </span><br><span class="line"><span class="string">‐‐‐</span> </span><br><span class="line"><span class="attr">server:</span> </span><br><span class="line">    <span class="attr">port:</span> <span class="number">8083</span> </span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">    <span class="attr">profiles:</span> <span class="string">dev</span> </span><br><span class="line"><span class="string">‐‐‐</span> </span><br><span class="line"><span class="attr">server:</span> </span><br><span class="line">    <span class="attr">port:</span> <span class="number">8084</span> </span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">    <span class="attr">profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure>

<p>激活指定profile</p>
<ul>
<li>在配置文件中指定spring.profiles.active=profiles值</li>
<li>命令行中以参数的形式传递：java -jar xxx.jar –spring.profiles.active=dev</li>
<li>虚拟机参数形式：-Dspring.profiles.active=dev<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200312150224.png" alt=""></li>
</ul>
<h2 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h2><h3 id="属性文件加载顺序"><a href="#属性文件加载顺序" class="headerlink" title="属性文件加载顺序"></a>属性文件加载顺序</h3><p>SpringBoot会从如下几个位置加载配置<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200312154020.png" alt=""></p>
<p>官方文档讲解：<br><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/html/spring-boot-features.html#boot-features-external-config-application-property-files" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/html/spring-boot-features.html#boot-features-external-config-application-property-files</a></p>
<h3 id="外部配置文件加载顺序"><a href="#外部配置文件加载顺序" class="headerlink" title="外部配置文件加载顺序"></a>外部配置文件加载顺序</h3><p>关于SpringBoot外部配置，由外到内，优先加载带profile的配置文件。</p>
<p>官方文档讲解：<br><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/html/spring-boot-features.html#boot-features-external-config" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/html/spring-boot-features.html#boot-features-external-config</a></p>
<h2 id="配置原理"><a href="#配置原理" class="headerlink" title="配置原理"></a>配置原理</h2><p>官方API核心属性：<br><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/html/appendix-application-properties.html#core-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/html/appendix-application-properties.html#core-properties</a></p>
<p>配置原理说明：</p>
<ul>
<li>SpringBoot在启动时会加载大量的XxxAutoConfiguration的类</li>
<li>每一个XxxAutoConfiguration类中基本上都会使用一个XxxProperties的类</li>
<li>在XxxProperties类中一定会指定加载配置文件中的前缀匹配的内容到属性类中</li>
<li>加载到XxxProperties类之后，会在XxxAutoConfiguration中使用XxxProperties<h1 id="SpringBoot与日志"><a href="#SpringBoot与日志" class="headerlink" title="SpringBoot与日志"></a>SpringBoot与日志</h1><h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200312172859.png" alt=""></li>
</ul>
<p><strong>SLF4J的使用</strong><br>SLF4J官网：<a href="http://www.slf4j.org" target="_blank" rel="noopener">http://www.slf4j.org</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取日志记录器</span></span><br><span class="line">        Logger logger = LoggerFactory.getLogger(Springboot03LoggingApplicationTests<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//日志可以输出的级别，在记录日志的时候，可以使用不同的级别记录日志。</span></span><br><span class="line">        <span class="comment">//如果指定了日志输出级别，那么会输出指定级别及更高级别的日志信息</span></span><br><span class="line">        <span class="comment">//trace日志，跟踪日志</span></span><br><span class="line">        logger.trace(<span class="string">"这是一个trace日志"</span>);</span><br><span class="line">        <span class="comment">//debug日志，调试日志</span></span><br><span class="line">        logger.debug(<span class="string">"这是一个debug日志"</span>);</span><br><span class="line">        <span class="comment">//info日志，消息日志，默认入职输出级别是info</span></span><br><span class="line">        logger.info(<span class="string">"这是一个info日志"</span>);</span><br><span class="line">        <span class="comment">//warn日志，错误日志</span></span><br><span class="line">        logger.warn(<span class="string">"这是一个warn日志"</span>);</span><br><span class="line">        <span class="comment">//error日志，错误日志</span></span><br><span class="line">        logger.error(<span class="string">"这是一个error日志"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>上述优先级为trace&lt;debug&lt;info&lt;warn&lt;error;</p>
<p>在application.properties文件可以修改优先级，使得在指定包下指定日志输出级别，如设置trace，则打印trace即比trace优先级高的日志；</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.level.com.bin</span>=<span class="string">trace</span></span><br></pre></td></tr></table></figure>
<p>使用其他的日志实现：<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200312200922.png" alt=""></p>
<p>问题：<br>如何解决一个应用程序可能有其他的日志？<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200312201151.png" alt=""></p>
<p>将系统中所有的日志统一到SLF4J</p>
<ol>
<li>将系统中其他的日志框架先排除出去</li>
<li>用中间包来替换原有的框架</li>
<li>我们导入SEF4J其它实现</li>
</ol>
<h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><p>SpringBoot已经帮我们进行了日志配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定日志级别</span></span><br><span class="line"><span class="comment">#logging.level.包名=级别</span></span><br><span class="line"><span class="meta">logging.level.com.bin</span>=<span class="string">trace</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将日志输出到文件中</span></span><br><span class="line"><span class="comment">#如果不指定，默认在当前目录下创建日志文件springboot.log，已过时</span></span><br><span class="line"><span class="comment">#logging.file=路径+日志文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定日志生成路径，已过时</span></span><br><span class="line"><span class="comment">#logging.path=路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定日志文件的文件名，默然在项目路径下</span></span><br><span class="line"><span class="meta">logging.file.name</span>=<span class="string">springboot.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定日志文件生成的路径，默认文件名spring.log。不能与logging.file.name共用</span></span><br><span class="line"><span class="meta">logging.file.path</span>=<span class="string">D:/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定日志在控制台的输出格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定日志在文件中的输出格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出格式：</span></span><br><span class="line"><span class="comment">			%d表示日期时间，</span></span><br><span class="line"><span class="comment">			%thread表示线程名，</span></span><br><span class="line"><span class="comment">			%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">			%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class="line"><span class="comment">			%msg：日志消息，</span></span><br><span class="line"><span class="comment">			%n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="SpringBoot与Web开发"><a href="#SpringBoot与Web开发" class="headerlink" title="SpringBoot与Web开发"></a>SpringBoot与Web开发</h1><h2 id="静态资源映射"><a href="#静态资源映射" class="headerlink" title="静态资源映射"></a>静态资源映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">                CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">                <span class="comment">//当访问的请求路径是/webjars/**路径时，会到classpath:/META-INF/resources/webjars路径下查找资源</span></span><br><span class="line">                <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">                <span class="comment">//当访问的请求路径是/**时且在Spring中不存在请求处理的方法，会到“classpath:/METHA-INF/resources/”，"classpath:/resources/"，"classpath:/static/"，"classpath:/public/"和"/"下查找</span></span><br><span class="line">                <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(WebMvcAutoConfiguration.getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>
<h2 id="webjars"><a href="#webjars" class="headerlink" title="webjars"></a>webjars</h2><p>作用：将前端的静态资源以jar包的方式导入到项目中，通过maven进行管理<br>webjars官网：<a href="https://www.webjars.org" target="_blank" rel="noopener">https://www.webjars.org</a></p>
<p><strong>欢迎页</strong></p>
<blockquote>
<p>SpringBoot运行后会在”<code>classpath:/METHA-INF/resources/”，&quot;classpath:/resources/&quot;，&quot;classpath:/static/&quot;，&quot;classpath:/public/</code>“找寻index页面作为首页。</p>
</blockquote>
<h2 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h2><p><strong>模板引擎</strong></p>
<blockquote>
<p>模板引擎有：JSP、Velocity、Freemarker、Thymeleaf<br>作用：将模板和数据解析数据将数据输到模板中，最终显示给用户<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200313111727.png" alt=""></p>
</blockquote>
<p><strong>引入Thymeleaf模板</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入Thymeleaf场景启动器--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Thymeleaf自动渲染</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class="string">"UTF-8"</span>); </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class="string">"text/html"</span>); </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br></pre></td></tr></table></figure>

<p>只要我们把HTML页面放在<code>classpath:/templates/</code>，thymeleaf就能自动渲染；</p>
<p><strong>导入thymeleaf的名称空间</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>语法规则</strong><br>官方文档：<br><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#dialects-the-standard-dialect" target="_blank" rel="noopener">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#dialects-the-standard-dialect</a></p>
<p>基本语法<br><strong>简单表达式 ${…}</strong><br>使用方法：直接使用 <code>th:xx=&quot;${}&quot;</code> 获取对象属性 。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"userForm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;user.id&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;user.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;user.password&#125;"</span>/&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>选择变量表达式：*{…}</strong><br>使用方法：首先通过<code>th:object</code>获取对象，然后使用<code>th:xx = &quot;*{}&quot;</code>获取对象属性。<br>这种简写风格极为清爽，推荐大家在实际项目中使用。 例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"userForm"</span> <span class="attr">th:object</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">th:value</span>=<span class="string">"*&#123;id&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">th:value</span>=<span class="string">"*&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">th:value</span>=<span class="string">"*&#123;password&#125;"</span>/&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>消息表达式：#{…}</strong><br>即通常的国际化属性：<code>#{msg}</code>用于获取国际化语言翻译值。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span> <span class="attr">th:text</span>=<span class="string">"#&#123;user.title&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>链接URL表达式：@{…}</strong><br>使用方法：通过链接表达式@{}直接拿到应用路径，然后拼接静态资源路径。例如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/webjars/jquery/jquery.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/webjars/bootstrap/css/bootstrap.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>片段表达式：~{…}</strong><br>片段表达式是Thymeleaf的特色之一，细粒度可以达到标签级别，这是JSP无法做到的。<br>片段表达式拥有三种语法：<br><code>~{ viewName } 表示引入完整页面</code><br><code>~{ viewName :: selector} 表示在指定页面寻找片段 其中selector可为片段名、jquery选择器等</code><br><code>~{ :: selector} 表示在当前页寻找</code><br>使用方法：首先通过<code>th:fragment</code>定制片段 ，然后通过<code>th:replace</code>(替换整个div，推荐使用它)或<code>th:insert</code>（插入div中）填写片段路径和片段名。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:fragment</span>=<span class="string">"static"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/webjars/jquery/3.3.1/jquery.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"~&#123;common/head::static&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在实际使用中，我们往往使用更简洁的表达，去掉表达式外壳直接填写片段名。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"common/head::static"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>值得注意的是，使用替换路径th:replace 开头请勿添加斜杠，避免部署运行的时候出现路径报错。（因为默认拼接的路径为<code>spring.thymeleaf.prefix = classpath:/templates/）</code><br><strong>片段表达式引用片段传入参数</strong><br>第一步：<br>声明片段<br>可以声明变量参数，在片段中使用变量参数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"frag (name,age,hehe)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;onevar&#125; + ' - ' + $&#123;twovar&#125; + ' - ' +$&#123;hehe&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第二步：<br>引入片段<br>把参数的值，传入进来<br>如果，参数很少，可以直接写参数，参数可用简单表达式获取，也可自己字符串定义<br>如果，参数很多，可以指定变量名，对应的值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"::frag ($&#123;value1&#125;,$&#123;value2&#125;.'嘿嘿')"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"::frag (name=$&#123;value1&#125;,age=$&#123;value2&#125;,hehe='嘿嘿')"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第三步<br>使用实现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:class</span>=<span class="string">"$&#123; hehe == '嘿嘿'? 'nav-link active' : 'nav-link'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>ps:</strong><br>在基础语法中，默认支持字符串连接、数学运算、布尔逻辑和三目运算等。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:class</span>=<span class="string">"$&#123; name == 'main.html'? 'nav-link active' : 'nav-link'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>内联表达式</strong><br><code>[[...]]</code>或 <code>[(...)]</code> 中的表达式就是 Thymeleaf 中内联表达式，任何在 <code>th:text</code> 或 <code>th:utext</code>属性中使⽤的表达式都可以出现在<code>[[]]</code>或<code>[()]</code>中使用，<code>[[...]]</code>等价于 th:text（结果将被 HTML 转义），<code>[(...)]</code>等价于<code>th:utext</code>（结果不会执⾏HTML转义）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, [[$&#123;session.user.name&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>th:inline=”none” 禁用内联<br>内联机制可以被禁⽤，因为在实际应⽤中可能会想输出 [[…]] 或 [(…)] 序列⽽不将其内容作为表达式处理的情况。 为此将使⽤ th:inline =“none” 来禁⽤内联。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:inline</span>=<span class="string">"none"</span>&gt;</span>Hello, [[$&#123;session.user.name&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>记录一个小坑：</code><br>博主在html页面做注释时<code>&lt;!--我这里写东西里面解释[[]]和[()]--&gt;</code><br>然后我下面写在内联表达式失效了。。。将注释中[[]]和[()]恢复正常</p>
<p><strong>date</strong><br>java.util.Date对象的实用程序方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Format date with the specified pattern</span><br><span class="line"> * Also works with arrays, lists or sets</span><br><span class="line"> */</span><br><span class="line">$&#123;#dates.format(date, 'dd/MMM/yyyy HH:mm')&#125;</span><br><span class="line">$&#123;#dates.arrayFormat(datesArray, 'dd/MMM/yyyy HH:mm')&#125;</span><br><span class="line">$&#123;#dates.listFormat(datesList, 'dd/MMM/yyyy HH:mm')&#125;</span><br><span class="line">$&#123;#dates.setFormat(datesSet, 'dd/MMM/yyyy HH:mm')&#125;</span><br></pre></td></tr></table></figure>

<h1 id="web定制"><a href="#web定制" class="headerlink" title="web定制"></a>web定制</h1><h2 id="配置视图控制"><a href="#配置视图控制" class="headerlink" title="配置视图控制"></a>配置视图控制</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"><span class="comment">//为容器中添加视图控制</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/toIndex"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/toDashboard"</span>).setViewName(<span class="string">"dashboard"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"><span class="comment">//    配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor()).addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">"/toIndex"</span>,<span class="string">"/"</span>,<span class="string">"/doLogin"</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">"/asserts/**"</span> , <span class="string">"/webjars/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>未登录拦截：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        String username = (String)session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span> || StringUtils.isEmpty(username))&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">"/toIndex"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用超链接做国际化，只需要向容器中添加一个自己定义的LocalResolve即可</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LocaleResolver() &#123;</span><br><span class="line">            <span class="comment">//resolveLocale 解析本地的语言信息</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">                String localeStr = request.getParameter(<span class="string">"locale"</span>);</span><br><span class="line">                <span class="comment">//如果超链接没有携带Local参数，就使用默认语言解析</span></span><br><span class="line">                Locale locale = Locale.getDefault();</span><br><span class="line">                <span class="keyword">if</span> (locale == <span class="keyword">null</span> || locale.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                    String[] split = localeStr.split(<span class="string">"_"</span>);</span><br><span class="line">                    <span class="comment">//如果携带locale参数，根据locale参数，创建一个locale返回</span></span><br><span class="line">                    locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> locale;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#国际化</span></span><br><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">i18n</span></span><br><span class="line"><span class="comment">#禁用thymeleaf缓存</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#配置日期格式</span></span><br><span class="line"><span class="meta">spring.mvc.date-format</span>=<span class="string">yyyy-MM-dd</span></span><br><span class="line"><span class="comment">#启动HiddenHttpFilter功能 ，如果想使用RestFul风格的CRUD必须指定为true</span></span><br><span class="line"><span class="meta">spring.mvc.hiddenmethod.filter.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
<p>日期使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"*&#123;#dates.format(birth,'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span>sit<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="容器定制"><a href="#容器定制" class="headerlink" title="容器定制"></a>容器定制</h1><h2 id="错误页面定制"><a href="#错误页面定制" class="headerlink" title="错误页面定制"></a>错误页面定制</h2><p><strong>项目中有使用模板引擎的情况</strong><br>将错误页面命名为错误状态码.html，放在模板引擎文件夹里面的error文件夹下。发生此状态码的错误就会来到对应的页面。</p>
<p><strong>项目中没有使用模板引擎的情况</strong><br>将在静态文件夹下查找对应页面。</p>
<p><strong>如果以上两个都查找不到</strong><br>将显示SpringBoot默认的错误提示页面</p>
<h2 id="tomcat配置"><a href="#tomcat配置" class="headerlink" title="tomcat配置"></a>tomcat配置</h2><p>在applitation.properties中配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置启动的端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="comment"># 配置应用名称</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/crud</span></span><br><span class="line"><span class="comment"># 配置 uri-encoding</span></span><br><span class="line"><span class="meta">server.tomcat.uri-encoding</span>=<span class="string">UTF-8</span></span><br></pre></td></tr></table></figure>

<h2 id="注册servlet三大组件"><a href="#注册servlet三大组件" class="headerlink" title="注册servlet三大组件"></a>注册servlet三大组件</h2><p><strong>servlet注册</strong><br>写一个servlet类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyServlet.service"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在配置类中注册servlet：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//注册servlet</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletRegistrationBean&lt;Servlet&gt; servletServletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;();</span><br><span class="line">    servletServletRegistrationBean.setServlet(<span class="keyword">new</span> MyServlet());</span><br><span class="line">    servletServletRegistrationBean.setUrlMappings(Arrays.asList(<span class="string">"/testMyServlet"</span>));</span><br><span class="line">    <span class="keyword">return</span> servletServletRegistrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>filter注册</strong><br>写一个filter类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyFilter.doFilter"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在配置类中注册filter：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//注册filter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;MyFilter&gt; myFilterFilterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        myFilterFilterRegistrationBean.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line">        myFilterFilterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/testMyFilter"</span>));</span><br><span class="line">        <span class="keyword">return</span> myFilterFilterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>listener注册</strong><br>写一个listener类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyServletListener.contextInitialized"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在配置类中注册listener：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//注册listener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myServletListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletListenerRegistrationBean&lt;MyServletListener&gt; registrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;MyServletListener&gt;();</span><br><span class="line">        registrationBean.setListener(<span class="keyword">new</span> MyServletListener());</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用其他嵌入式的servlet容器"><a href="#使用其他嵌入式的servlet容器" class="headerlink" title="使用其他嵌入式的servlet容器"></a>使用其他嵌入式的servlet容器</h2><p>第一步，在pom.xml中引入要使用的容器：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入其他的嵌入式的Servlet容器 Jetty--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第二步排除以前的容器：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;!--排除之前的tomcat--&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="使用外部servlet容器，支持jsp"><a href="#使用外部servlet容器，支持jsp" class="headerlink" title="使用外部servlet容器，支持jsp"></a>使用外部servlet容器，支持jsp</h2><p>第一步创建新工程，选择war包方式创建：<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200314120413.png" alt=""><br>第二步建立webapp，注意目录，都放src/main/下：<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200314120534.png" alt=""><br>第三步，application.properties中指定视图解析器的前缀和后缀：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mvc.view.prefix</span>=<span class="string">/WEB-INF/</span></span><br><span class="line"><span class="meta">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br></pre></td></tr></table></figure>

<h1 id="SpringBoot与docker"><a href="#SpringBoot与docker" class="headerlink" title="SpringBoot与docker"></a>SpringBoot与docker</h1><p>Docker支持将软件编译成一个镜像；<br>然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使 用这个镜像；<br>运行中的这个镜像称为容器，容器启动是非常快速的。</p>
<p>容器技术充分利用操作系统本身已有的机制和特性，可以实现远超传统虚拟机的轻量级虚拟化。容器有效地将由单个操作系统管理的资 源划分到孤立的组中，以更好地孤立的组之间平衡有冲突的资 源使用需求。<br>优势：<br>1、快速分发和部署<br>2、一次创建或配置任意地方使用<br>3、更简单的更新管理</p>
<p>Docker官网：<a href="https://docs.docker.com" target="_blank" rel="noopener">https://docs.docker.com</a></p>
<h2 id="Docker的三个概念"><a href="#Docker的三个概念" class="headerlink" title="Docker的三个概念"></a>Docker的三个概念</h2><ol>
<li>镜像（Image）：类似于虚拟机中的镜像，是一个包含有文件系统的面向Docker引擎的只读模板。任何应用程序运行都需要环境，而镜像就是用来提供这种运行环境的。例如一个Ubuntu镜像就是一个包含Ubuntu操作系统环境的模板，同理在该镜像上装上Apache软件，就可以称为Apache镜像。</li>
<li>容器（Container）：类似于一个轻量级的沙盒，可以将其看作一个极简的Linux系统环境（包括root权限、进程空间、用户空间和网络空间等），以及运行在其中的应用程序。Docker引擎利用容器来运行、隔离各个应用。容器是镜像创建的应用实例，可以创建、启动、停止、删除容器，各个容器之间是是相互隔离的，互不影响。注意：镜像本身是只读的，容器从镜像启动时，Docker在镜像的上层创建一个可写层，镜像本身不变。</li>
<li>仓库（Repository）：类似于代码仓库，这里是镜像仓库，是Docker用来集中存放镜像文件的地方。注意与注册服务器（Registry）的区别：注册服务器是存放仓库的地方，一般会有多个仓库；而仓库是存放镜像的地方，一般每个仓库存放一类镜像，每个镜像利用tag进行区分，比如Ubuntu仓库存放有多个版本（12.04、14.04等）的Ubuntu镜像。</li>
</ol>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>1、检查内核版本，必须是3.10及以上 (及Centos7以上)<br><code>uname ‐r</code><br>2、安装docker<br><code>yum install docker</code><br>3、输入y确认安装<br>可直接用<code>yum install -y docker</code>直接安装<br>4、启动docker<br>[root@localhost ~]# <code>systemctl start docker</code> ，这里systrmctl与Centos6中service等同。<br>[root@localhost ~]# <code>docker ‐v</code> ，查看版本。<br>Docker version 1.12.6, build 3e8e77d/1.12.6<br>5、开机启动docker<br>[root@localhost ~]# <code>systemctl start docker</code><br>6、停止docker<br><code>service docker stop</code></p>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>1、搜索镜像<br>[root@localhost ~]# <code>docker search tomcat</code><br>2、拉取镜像<br>[root@localhost ~]#<code>docker pull tomcat</code><br>3、根据镜像启动容器<br><code>docker run ‐‐name mytomcat ‐d tomcat:latest</code><br>4、docker ps 查看运行中的容器<br>5、 停止运行中的容器 <code>docker stop 容器的id/容器名</code><br>6、查看所有的容器 <code>docker ps ‐a</code><br>7、启动容器 <code>docker start 容器id/容器名</code><br>8、删除一个容器 <code>docker rm 容器id/容器名</code><br>9、启动一个做了端口映射的tomcat<br><code>docker run ‐d ‐p 8888:8080 tomcat</code><br><code>docker run --name mysql1 -e MYSQL_ROOT_PASSWORD=123456 -d -p 3306:3306 mysql:5.7</code><br><code>docker run --name redis1 -d -p 6379:6379 redis:latest</code><br><code>‐d</code>：后台运行<br><code>‐p</code>: 将主机的端口映射到容器的一个端口 主机端口:容器内部的端口<br>10、为了演示简单关闭了linux的防火墙<br><code>service firewalld status</code> ；查看防火墙状态<br><code>service firewalld stop</code>：关闭防火墙<br>11、查看容器的日志 <code>docker logs container‐name/container‐id</code><br>更多命令参看 <a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/docker/ </a><br>可以参考每一个镜像的文档</p>
<h1 id="SpringBoot与数据访问"><a href="#SpringBoot与数据访问" class="headerlink" title="SpringBoot与数据访问"></a>SpringBoot与数据访问</h1><h2 id="快捷创建项目的勾选"><a href="#快捷创建项目的勾选" class="headerlink" title="快捷创建项目的勾选"></a>快捷创建项目的勾选</h2><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200315002547.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200315002622.png" alt=""></p>
<h2 id="pom-xml导入相关依赖"><a href="#pom-xml导入相关依赖" class="headerlink" title="pom.xml导入相关依赖"></a>pom.xml导入相关依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--log4j的依赖--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Druid数据源--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--小辣椒--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>maven依赖下载地址：<br><a href="https://mvnrepository.com/tags/maven?__cf_chl_jschl_tk__=66c4cd22d02333e8cf3e2561f89e6d2db596381a-1584195622-0-AWte-s55OKTF8Hr_AbSpIytnZS9A-F2oFly-0svS0-XahyN6l5_7RqJcET" target="_blank" rel="noopener">https://mvnrepository.com/tags/maven?<strong>cf_chl_jschl_tk</strong>=66c4cd22d02333e8cf3e2561f89e6d2db596381a-1584195622-0-AWte-s55OKTF8Hr_AbSpIytnZS9A-F2oFly-0svS0-XahyN6l5_7RqJcET</a></p>
<h2 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span>  <span class="string">jdbc:mysql://192.168.74.130:3306/jdbc</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="comment">#    通过type属性切换数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">   <span class="comment">#   数据源其他配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line"><span class="comment">#   配置mybatis的相关配置 指定mybatis的核心配置路径</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">"classpath:mybatis/mybatis-config.xml"</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">"classpath:mybatis/mappers/*.xml"</span></span><br></pre></td></tr></table></figure>

<p>目录层次结构:<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200315002218.png" alt=""></p>
<h2 id="Druid配置"><a href="#Druid配置" class="headerlink" title="Druid配置"></a>Druid配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*自己将Druid数据源添加到IOC容器中，并给其指定属性</span></span><br><span class="line"><span class="comment">     *启动如果出现Reason: org.apache.log4j.Logger 表明项目中缺少log4j的日志 */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*配置StatViewServlet 生效*/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean&lt;StatViewServlet&gt; <span class="title">statViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*注册那个Servlet*/</span></span><br><span class="line">        registrationBean.setServlet(<span class="keyword">new</span> StatViewServlet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*配置映射路径/druid/* 交给statViewServlet受理*/</span></span><br><span class="line">        registrationBean.setUrlMappings(Arrays.asList(<span class="string">"/druid/*"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置Servlet初始化参数*/</span></span><br><span class="line">        HashMap&lt;String, String&gt; initParam = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParam.put(<span class="string">"loginUsername"</span>, <span class="string">"druid"</span>);</span><br><span class="line">        initParam.put(<span class="string">"loginPassword"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">/*allow配置哪些或哪台主机可以访问监控后台，如果不指定，默认所有的IP地址可以访问*/</span></span><br><span class="line">        initParam.put(<span class="string">"allow"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="comment">/*deny不允许哪些主机访问*/</span></span><br><span class="line">        initParam.put(<span class="string">"deny"</span>, <span class="string">"192.168.12.12"</span>);</span><br><span class="line">        registrationBean.setInitParameters(initParam);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*配置过滤器：用来监控用户执行的SQL WebStatFilter*/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;WebStatFilter&gt; <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        filterRegistrationBean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        HashMap&lt;String,String&gt; initParam = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">/*不包含以下静态资源，不去统计*/</span></span><br><span class="line">        initParam.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.css,*.jpg,*.png,*.gif，*.json,/druid/*"</span>);</span><br><span class="line">        filterRegistrationBean.setInitParameters(initParam);</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="标注mapper两种方式"><a href="#标注mapper两种方式" class="headerlink" title="标注mapper两种方式"></a>标注mapper两种方式</h2><ol>
<li>主程序上添加<code>@MapperScan(basePackages = &quot;com.bin.springboot.dao&quot;)</code></li>
</ol>
<p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200315002805.png" alt=""></p>
<ol start="2">
<li>接口上添加<code>@Mapper</code></li>
</ol>
<p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200315002913.png" alt=""><br>其中<code>@Options(useGeneratedKeys =true ,keyProperty = &quot;id&quot;)</code>来返回自动递增获取的id值。</p>
<h1 id="SpringBoot启动配置原理"><a href="#SpringBoot启动配置原理" class="headerlink" title="SpringBoot启动配置原理"></a>SpringBoot启动配置原理</h1><blockquote>
<p>Spring Boot启动扫描所有jar包的META-INF/spring.factories中配置的 EnableAutoConfiguration组件</p>
<p>spring-boot-autoconfigure.jar\META-INF\spring.factories有启动时需要加载的 EnableAutoConfiguration组件配置</p>
<p>配置文件中使用debug=true可以观看到当前启用的自动配置的信息</p>
<p>自动配置会为容器中添加大量组件<br>Spring Boot在做任何功能都需要从容器中获取这个功能的组件</p>
<p>Spring Boot 总是遵循一个标准，容器中有我们自己配置的组件就用我们配置的，没有就用自动配 置默认注册进来的组件</p>
</blockquote>
<h1 id="SpringBoot自定义starter"><a href="#SpringBoot自定义starter" class="headerlink" title="SpringBoot自定义starter"></a>SpringBoot自定义starter</h1><p>可参考以下博客：<a href="https://blog.csdn.net/vbirdbest/article/details/79863883" target="_blank" rel="noopener">https://blog.csdn.net/vbirdbest/article/details/79863883</a></p>
]]></content>
      <categories>
        <category>Java 框架</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2020/03/06/Nginx/</url>
    <content><![CDATA[<h1 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h1><p>&#160; &#160; &#160; &#160; Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。<br>&#160; &#160; &#160; &#160; 其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。<br>&#160; &#160; &#160; &#160; Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。<br>&#160; &#160; &#160; &#160; Nginx专门为性能优化而开发，占内存少，并发能力强，能经受高负载的考验，支持高达50 000个并发连接数。</p>
<a id="more"></a>

<h1 id="下载Nginx"><a href="#下载Nginx" class="headerlink" title="下载Nginx"></a>下载Nginx</h1><p>&#160; &#160; &#160; &#160; <strong>nginx.org官网下载<a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a></strong><br>&#160; &#160; &#160; &#160; 安装前准备 : 安装nginx需要的库<br>&#160; &#160; &#160; &#160; 安装gcc，nginx需要先将官网上下载的源码进行编译，编译需要依赖gcc环境。<code>yum install gcc-c++</code><br>&#160; &#160; &#160; &#160; 安装PCRE，PCRE是一个Perl库，包括了perl兼容的正则表达式库。nginx的http模板使用pcre来解析正则表达式。<code>yum install -y pcre pcre-devel</code><br>&#160; &#160; &#160; &#160; zlib库提供了很多种压缩解压的方式，nginx使用zlib对http包的内容进行gzlib,所以需要zlib库。<code>yum install -y zlib zlib-devel</code><br>&#160; &#160; &#160; &#160; OpenSSL是一个强大的安全套接字层密码库。 囊括主要的密码算法，常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其他目的使用。nginx不仅支持http协议，还支持https,所以需要安装openssl库。<code>yum install  -y openssl openssl-devel</code><br>&#160; &#160; &#160; &#160; 正式安装Nginx<br>&#160; &#160; &#160; &#160; 1.解压Nginx <code>tar -zxvf nginx-1.16.1.tar.gz</code><br>&#160; &#160; &#160; &#160; 2.切换到解压后的文件中 <code>cd nginx-1.16.1</code><br>&#160; &#160; &#160; &#160; 3.指定安装目录<code>./configure --prefix=/usr/local/java/nginx</code><br>&#160; &#160; &#160; &#160; 4.还是在/opt/nginx-1.16.1目录下执行编译<code>make</code><br>&#160; &#160; &#160; &#160; 5.继续执行<code>make install</code><br>&#160; &#160; &#160; &#160; 6.启动nginx <code>cd /usr/local/java/nginx/sbin</code>中启动<code>./nginx</code><br>&#160; &#160; &#160; &#160; 7.查看进程,有Nginx的master进程和worker进程说明启动成功 <strong>ps -ef | grep nginx</strong>，Nginx体系主要包括master和worker两大进程，master进程读取配置文件,并维护worker进程,而worker进程则对请求进行实际处理;<br>&#160; &#160; &#160; &#160; 8.关闭：<code>./nginx -s stop</code><br>&#160; &#160; &#160; &#160; 8.重启：<code>./nginx -s reload</code></p>
<h1 id="Nginx配置文件nginx-conf"><a href="#Nginx配置文件nginx-conf" class="headerlink" title="Nginx配置文件nginx.conf"></a>Nginx配置文件nginx.conf</h1><p><strong>more nginx.conf</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;基本配置&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">#user  nobody;      #表示当前配置的权限，一般为root</span><br><span class="line">worker_processes  1;    #配置工作进程数目,根据硬件调整,通常等于CPU数量或者2倍于CPU数量</span><br><span class="line"></span><br><span class="line">#error_log  logs&#x2F;error.log; #配置全局错误日志及类型,[debug | info | notice | warn | error |crit]默认是error</span><br><span class="line">#error_log  logs&#x2F;error.log  notice;</span><br><span class="line">#error_log  logs&#x2F;error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs&#x2F;nginx.pid;     #配置进程pid文件</span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;配置工作模式和连接数&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;   #配置每个worker进程连接数上限,nginx支持的总连接数就等于worker_process * worker_connections</span><br><span class="line">&#125;</span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;配置http服务器,利用它的反向代理功能提供负载均衡支持&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   #配置nginx支持哪些多媒体类型,可以在conf&#x2F;mime.types查看支持哪些多媒体类型;</span><br><span class="line">    default_type  application&#x2F;octet-stream;     #默认文件类型;</span><br><span class="line"></span><br><span class="line">    #配置日志格式 </span><br><span class="line">    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line">    </span><br><span class="line">    #配置access.log日志及存放路径,并使用上面定义的main日志格式</span><br><span class="line">    #access_log  logs&#x2F;access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;     #开启高效文件传输模式;</span><br><span class="line">    #tcp_nopush     on;     #防止网络阻塞;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;  #长连接超时时间,单位是秒</span><br><span class="line"></span><br><span class="line">    #gzip  on; #开启gzip压缩输出</span><br><span class="line">    </span><br><span class="line">###--------------------------------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"> #多个sever配置</span><br><span class="line">   </span><br><span class="line">   #配置虚拟主机</span><br><span class="line">   server &#123;</span><br><span class="line">        listen       80;    #配置监听端口</span><br><span class="line">        server_name  localhost; #配置服务名</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;    #配置字符集</span><br><span class="line"></span><br><span class="line">        #access_log  logs&#x2F;host.access.log  main; #配置本虚拟主机的访问日志</span><br><span class="line">        </span><br><span class="line">        #默认的&#x2F;请求,当访问路径中有斜杆&#x2F;,会被location匹配到并进行处理</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html; #root是配置服务器的默认网站根目录位置,默认为nginx安装主目录下的html目录</span><br><span class="line">            index  index.html index.htm; #配置首页文件名称</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              &#x2F;404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page &#x2F;50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #PHP 脚本请求全部转发到Apache处理</span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line">        </span><br><span class="line">        #PHP脚本请求全部转发到FastCGI处理</span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  &#x2F;scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line">          </span><br><span class="line">         #禁止访问.htaccess文件 </span><br><span class="line">        # deny access to .htaccess files, if Apache&#39;s document root</span><br><span class="line">        # concurs with nginx&#39;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ &#x2F;\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     #配置另一个虚拟主机</span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location &#x2F; &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    #配置https服务,安全网络传输协议,加密传输,端口443,运维来配置</span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location &#x2F; &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Nginx静态网站"><a href="#Nginx静态网站" class="headerlink" title="Nginx静态网站"></a>Nginx静态网站</h2><blockquote>
<p>Nginx是一个HTTP的web服务器.可以将服务器上静态文件通过HTTP协议返回给浏览器客户端;</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">            root  &#x2F;optstatic&#x2F;传输上去的静态文件;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h1 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h1><h2 id="Nginx正向代理"><a href="#Nginx正向代理" class="headerlink" title="Nginx正向代理"></a>Nginx正向代理</h2><blockquote>
<p>把局域网外的Internet想象成一个巨大的资源库，则局域网中的客户端要访问Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理。<br>正向代理架设在客户机与目标主机之间，只用于代理内部网络对Internet的连接请求；正向代理代理的是客户端 ;</p>
</blockquote>
<h2 id="Nginx反向代理-1"><a href="#Nginx反向代理-1" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h2><blockquote>
<p>客户端对反向代理是无感知的，因为客户端不需要任何配置就能访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器就是一个服务器，暴露的代理服务器地址隐藏了真实服务器的IP地址。<br>反向代理服务器架设在服务器端，通过缓冲经常被请求的页面来缓解服务器的工作量；反向代理代理的是服务端 ;<br>使用方法：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.123.com;#访问域名</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;#被代理服务器的地址。可以是主机名称、IP地址加端口号的形式。</span><br><span class="line">            index  index.html index.htm index.jsp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><blockquote>
<p>单个服务器解决不了,我们增加服务器的数量,然后将请求分发到各个服务器上,将原来请求集中单个服务器的情况改为分发到对个服务器上,将负载发布到多个的服务器,也就是我们说的<strong>负责均衡</strong>;</p>
</blockquote>
<ul>
<li><p><strong>硬件</strong></p>
<blockquote>
<p>比如 : F5, 深信服 .Arry等;<br>优点,厂商专业的技术团队提供支持,性能稳定;<br>缺点:费用昂贵,对规模较小的网络应用成本较高;</p>
</blockquote>
</li>
<li><p><strong>软件</strong></p>
<blockquote>
<p>比如 : Nginx , LVS , HAProxy等;<br>免费开源,成本低廉;</p>
</blockquote>
</li>
<li><p><strong>通过Nginx的nginx.conf文件实现负载均衡</strong><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200307002852.png" alt=""></p>
<p><strong>使用方法</strong><br><strong>配置2步</strong><br>1.在http模块加上:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream www.bin1018.com&#123;</span><br><span class="line">               server 127.123.123.168:8080 weight &#x3D; 3;</span><br><span class="line">               server 127.123.123.168:8081 weight &#x3D; 1;</span><br><span class="line">               ip_hash;</span><br><span class="line">               &#125;</span><br><span class="line"> #weight表示权重,用于后端服务器性能不均的情况,访问比率等于权重之比,权重越大访问机会越多;</span><br><span class="line"> #upstream是配置nginx非常重要的一个模块,并且它还能对后端的服务器的健康状况进行检查,若后端服务器中一台发生故障,则前端请求不会转发到该故障服务器上;</span><br><span class="line"># ip_hash;一种IP的算法，只要用户使用同一个IP请求，nginx会分流到之前请求的服务器，解决session登录的配置问题。</span><br></pre></td></tr></table></figure>
<p>2.在server模块里添加 : (举例)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F;myweb &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;www.bin1018.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<a href="http://www.bin1018.com字符串要和upstream后面的字符串相等" target="_blank" rel="noopener">www.bin1018.com字符串要和upstream后面的字符串相等</a>;<br>ps:这两个字符串写什么无所谓,只要保证相等,写域名主要是因为可读性高;</p>
<h1 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h1><blockquote>
<p>为了加快网站的解析速度.可以把动态页面和静态页面由不同的服务器解析,加快解析速度;降低原来单个服务器的压力;</p>
</blockquote>
<p><strong>使用方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user  root;</span><br><span class="line">#将之前默认的#user  nobody;进行以上修改，获取访问静态资源的权限   </span><br><span class="line">location ~*\.(css|js|html|png) &#123;</span><br><span class="line">    root &#x2F;usr&#x2F;resources;</span><br><span class="line">    #&#x2F;usr&#x2F;resources是存放的静态资源文件的绝对路径。</span><br><span class="line">    expires 7d;</span><br><span class="line">    #有效天数。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ps：上面用到了正则表达式，默认css等静态资源将再静态资源文件中获取。</p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo</title>
    <url>/2020/03/06/PicGo/</url>
    <content><![CDATA[<p>&#160; &#160; &#160; &#160; 对于很多程序员来说都有写博客的习惯，之前一直喜欢用印象笔记来写东西然后发布到自己的CSDN账号。不过发现一个问题，印象笔记生成的图片链接到CSDN上无法使用，显示私密链接。而且很多程序员都有自己的个人博客，对于博客来说不可避免有不少图片，会严重影响博客的加载速度，于是很多程序员都喜欢用图床技术。<br>&#160; &#160; &#160; &#160; 为了解决这个问题，可以把自己图片放到图床上去，这样就可以共用。可以直接在聚合图床：<a href="https://www.superbed.cn" target="_blank" rel="noopener">https://www.superbed.cn</a>，上传自己的图片获得链接。可是有弊端，链接可能会失效，之前阅读别人博客，会发现很多博客图片失效。对于程序员来说博客图片必不可少，若多年前文章中图片链接突然失效，很难恢复，因为自己很难记得这些图的内容了。当然聚合图床的会员可以避免这种情况。很贵，不推荐。求人不如求己，我们可以用github构造一个图床，由于github外网的原因，图片加载会很慢，github能做到的事情码云肯定可以做，说了这么多，现在就讲如何用PicGo+码云来构建自己的图床。所有操作之前先在自己电脑内下载node.js。</p>
<a id="more"></a>

<ul>
<li><p>下载PicGo：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo</a>下载匹配自己电脑的版本，这里我下的Windows版本。<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200306124226.png" alt=""></p>
</li>
<li><p>在PicGo中搜索gitee插件并安装。<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200306124604.png" alt=""></p>
</li>
<li><p>在码云中创建一个新厂库来保存图片</p>
</li>
</ul>
<p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200306124907.png" alt=""></p>
<ul>
<li>创建完选择去设置</li>
</ul>
<p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200306125059.png" alt=""></p>
<ul>
<li>点击私人令牌</li>
</ul>
<p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200306125309.png" alt=""></p>
<ul>
<li>创建新的令牌，后勾选project即可提交</li>
</ul>
<p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200306125412.png" alt=""></p>
<ul>
<li>此时会生成一个token注意保存，只会显示一次。</li>
<li>如下图设置PicGo即可。<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200306125716.png" alt=""></li>
</ul>
<p>ps；一些坑，在这里使用PicGo作者出现了剪切板上传出现警告，你可能没有，我把我的解决办法奉上：</p>
<ol>
<li>找到powershell路径</li>
</ol>
<p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200306130704.png" alt=""></p>
<ol start="2">
<li>在环境变量中path添加powershell路径已经piggo的相关配置</li>
</ol>
<p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200306130902.png" alt=""></p>
<p>3.重启电脑，后就可以使用自己的图床了。 </p>
]]></content>
      <categories>
        <category>图床</category>
      </categories>
      <tags>
        <tag>PicGo</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2020/03/02/Redis/</url>
    <content><![CDATA[<h1 id="NoSql"><a href="#NoSql" class="headerlink" title="NoSql"></a>NoSql</h1><p>&#160; &#160; &#160; &#160;Redis属于NoSql里面的一个具体的技术</p>
<h2 id="NoSql入门和概述"><a href="#NoSql入门和概述" class="headerlink" title="NoSql入门和概述"></a>NoSql入门和概述</h2><p>&#160; &#160;<strong>入门概述</strong></p>
<p>&#160; &#160; &#160; &#160;在90年代，一个网站的访问量一般都不大，用单个数据库完全可以轻松应付。在那个时候，更多的都是静态网页，动态交互类型的网站不多。随着现在互联网用户剧增, 如果同时大量语句进行, MySQL将无法应付。数据量的剧增,会存在一个机器放不下, 数据的索引也存放不下。同时访问量的增加, MySQL就开始出现性能问题。为了提高性能, 开始利用缓存, 减少MySQL性能消耗。</p>
<a id="more"></a>
<p>&#160; &#160; &#160; &#160;但随着访问量持续增大，多台机器之间缓存无法共享，大量的小文件缓冲也会带来比较高的IO压力。此时Memcached自然的成为了一个时尚的产品。它解决了多台机器数据共用问题。Memcached(缓存)+MySQL+垂直拆分技术的出现，来进行主从分离，就出现了分表分库提高性能。随着访问量继续增长，分表分库+水平拆分+mysql集群。但MySQL存储大文件时，在做数据库恢复时特别慢，大数据下它表现出的扩展性差，表结构更加困难。</p>
<p>&#160; &#160; &#160; &#160;当今互联网架构图：<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200303141740.png" alt=""></p>
<p>&#160; &#160; &#160; &#160;为什么要用NoSql?<br>&#160; &#160; &#160; &#160;今天我们可以通过第三方平台可以很容易的访问和抓取数据。用户的个人信息，网络地址，操作日志 成倍增加，如果我们要对这些用户数据进行挖掘，那么SQL数据库已经不适合这些应用了。NoSQL数据库的发展能很好的处理这些数据。</p>
<p>&#160; &#160; &#160; &#160;什么是NoSql？<br>&#160; &#160; &#160; &#160;<u>NoSql=Not Only SQL</u>，不仅仅是SQL，泛指<u>非关系形数据库</u>，解决大规模数据集合，多重数据种类带来的挑战。</p>
<p>&#160; &#160; &#160; &#160;NoSql能干嘛？<br>&#160; &#160; &#160; &#160;易扩展，去掉关系型数据库的关系型特性，数据之间无关系，非常容易扩展；大数据量高性能，每一秒中支持11万次读，8万次写。大数量下表现优异，符合当今互联网时代下的发展；多样灵活的数据模型，随时储存自定义的数据类型。对应KV键值对，Cashe缓存型数据库,Persistence持久性。</p>
<p>&#160;&#160; &#160; &#160;NoSql对应的三个产品：<br>&#160;&#160; &#160; &#160; Redis | memecache | Mongdb</p>
<h2 id="NoSql-3V-3高"><a href="#NoSql-3V-3高" class="headerlink" title="NoSql 3V + 3高"></a><strong>NoSql 3V + 3高</strong></h2><p>&#160; &#160; &#160; &#160;大数据时代的3V：<br>&#160; &#160; &#160; &#160;海量Volume | 多样Variety | 实时Velocity<br>&#160; &#160; &#160; &#160;互联网需求的3高：<br>&#160; &#160; &#160; &#160;高并发 | 高可扩 | 高性能</p>
<h2 id="当下NoSql的经典应用"><a href="#当下NoSql的经典应用" class="headerlink" title="当下NoSql的经典应用"></a><strong>当下NoSql的经典应用</strong></h2><p>&#160; &#160; &#160; &#160; 当下的应用是sql和nosql一起使用的。</p>
<p>&#160; &#160; &#160; &#160; NoSql经典应用：</p>
<p>&#160; &#160; &#160; &#160; 阿里巴巴技术演变图:<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200303155442.png" alt=""></p>
<p>&#160; &#160; &#160; &#160; 阿里巴巴中文网:</p>
<p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200303155136.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200303155257.png" alt=""></p>
<h2 id="NoSQL数据模型简介"><a href="#NoSQL数据模型简介" class="headerlink" title="NoSQL数据模型简介"></a><strong>NoSQL数据模型简介</strong></h2><p>&#160; &#160; &#160; &#160; 聚合模型<br>&#160; &#160; &#160; &#160; KV键值；bson；列族（顾名思义，是按列存储数据的。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的IO优势。）；图形。</p>
<h2 id="NoSQL数据库的四大分类"><a href="#NoSQL数据库的四大分类" class="headerlink" title="NoSQL数据库的四大分类"></a><strong>NoSQL数据库的四大分类</strong></h2><p>&#160; &#160; &#160; &#160; KV键值：<br>典型介绍<br>新浪：BerkeleyDB+redis | 美团：redis+tair | 阿里、百度：memcache+redis</p>
<p>&#160; &#160; &#160; &#160; 文档型数据库(bson格式比较多)：<br>典型介绍<br>CouchDB | MongoDB（是一个基于分布式文件存储的数据库一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。）</p>
<p>&#160; &#160; &#160; &#160; 列存储数据库<br>Cassandra, HBase | 分布式文件系统</p>
<p>&#160; &#160; &#160; &#160; 图关系数据库<br>它不是放图形的，放的是关系比如:朋友圈社交网络、广告推荐系统 ；社交网络，推荐系统等。专注于构建关系图谱;代表有：Neo4J, InfoGrid。</p>
<h2 id="在分布式数据库中CAP原理CAP-BASE"><a href="#在分布式数据库中CAP原理CAP-BASE" class="headerlink" title="在分布式数据库中CAP原理CAP+BASE"></a><strong>在分布式数据库中CAP原理CAP+BASE</strong></h2><p>&#160; &#160; &#160; &#160; 传统的ACID分别是什么？</p>
<blockquote>
<p>事务在英文中是transaction，和现实世界中的交易很类似，它有如下四个特性：<br>1、A (Atomicity) 原子性原子性很容易理解，也就是说事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚。比如银行转账，从A账户转100元至B账户，分为两个步骤：1）从A账户取100元；2）存入100元至B账户。这两步要么一起完成，要么一起不完成，如果只完成第一步，第二步失败，钱会莫名其妙少了100元。<br>2、C (Consistency) 一致性一致性也比较容易理解，也就是说数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。<br>3、I (Isolation) 独立性所谓的独立性是指并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。比如现有有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的<br>4、D (Durability) 持久性持久性是指一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。</p>
</blockquote>
<p>&#160; &#160; &#160; &#160; <strong>CAP</strong><br>&#160; &#160; &#160; &#160; C: Consistency（强一致性）<br>&#160; &#160; &#160; &#160; A: Availability（高可用性）<br>&#160; &#160; &#160; &#160; P:Partition tolerance（分区容错性）</p>
<p>&#160; &#160; &#160; &#160; CAP3选2<br>&#160; &#160; &#160; &#160;<br>CAP理论就是说在分布式存储系统中，最多只能实现上面的两点。而由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容忍性是我们必须需要实现的。所以我们只能在一致性和可用性之间进行权衡。</p>
<p>CA 传统Oracle数据库 |  AP 大多数网站架构的选择 |  CP Redis、Mongodb</p>
<p>一致性和可用性之间取一个平衡。多余大多数web应用，其实并不需要强一致性。因此牺牲C换取P，这是目前分布式数据库产品的方向</p>
<p>&#160; &#160; &#160; &#160; <strong>BASE</strong><br>&#160; &#160; &#160; &#160; BASE就是为了解决关系数据库强一致性引起的问题而引起的可用性降低而提出的解决方案。<br>&#160; &#160; &#160; &#160; BASE其实是下面三个术语的缩写：<br>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; 基本可用（Basically Available）<br>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; 软状态（Soft state）<br>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; 最终一致（Eventually consistent</p>
<p>&#160; &#160; &#160; &#160; <strong>分布式+集群简介</strong></p>
<blockquote>
<p>分布式系统（distributed system） 由多台计算机和通信的软件组件通过计算机网络连接（本地网络或广域网）组成。分布式系统是建立在网络之上的软件系统。正是因为软件的特性，所以分布式系统具有高度的内聚性和透明性。因此，网络和分布式系统之间的区别更多的在于高层软件（特别是操作系统），而不是硬件。分布式系统可以应用在在不同的平台上如：Pc、工作站、局域网和广域网上等。<br>简单来讲：<br>1分布式：不同的多台服务器上面部署不同的服务模块（工程），他们之间通过Rpc/Rmi之间通信和调用，对外提供服务和组内协作。<br>2集群：不同的多台服务器上面部署相同的服务模块，通过分布式调度软件进行统一的调度，对外提供服务和访问。</p>
</blockquote>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis入门介绍"><a href="#Redis入门介绍" class="headerlink" title="Redis入门介绍"></a>Redis入门介绍</h2><p>&#160; &#160; &#160; &#160; <strong>入门概述</strong></p>
<p>&#160; &#160; &#160; &#160; Redis:REmote DIctionary Server(远程字典服务器)<br>&#160; &#160; &#160; &#160; 是完全开源免费的，用C语言编写的，遵守BSD协议，是一个高性能的(key/value)分布式内存数据库，基于内存运行并支持持久化的NoSQL数据库，是当前最热门的NoSql数据库之一,也被人们称为数据结构服务器。</p>
<p>&#160; &#160; &#160; &#160; Redis 与其他 key - value 缓存产品有以下三个特点：</p>
<blockquote>
<p>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用；<br>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储；<br>Redis支持数据的备份，即master-slave模式的数据备份；</p>
</blockquote>
<p>&#160; &#160; &#160; &#160; Redis能干嘛?<br>&#160; &#160; &#160; &#160; 内存存储和持久化：redis支持异步将内存中的数据写到硬盘上，同时不影响继续服务；取最新N个数据的操作，如：可以将最新的10条评论的ID放在Redis的List集合里面；模拟类似于HttpSession这种需要设定过期时间的功能；发布、订阅消息系统；定时器、计数器；</p>
<h3 id="安装并编写HelloWorld"><a href="#安装并编写HelloWorld" class="headerlink" title="安装并编写HelloWorld"></a>安装并编写HelloWorld</h3><blockquote>
<p>官方下载网站：<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a>(99%安装在Linux中)<br>下载完压缩包传到 /opt文件夹中<br>解压后存入 /usr/local/java 中<br>进入Redis中 cd redis-3.0.4/<br>安装gcc yum install gcc-c++<br>执行 make distclean之后执行make<br>执行安装 make install<br>查看默认安装目录 cd /usr/local/bin<br>ls-l 查看如下<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304013652.png" alt=""><br>执行 cd /usr/local/java/redis-3.0.4/<br>找到一个 redis.conf<br>执行 mkdir /myRedis/<br>执行 cp redis.conf /myRedis/<br>执行 vim /myRedis/redis.conf/<br>修改 daemonize no 为 daemonize yes (使redis能在后台的方式运行)<br>编写Redis的HelloWorld<br>查看redis是否启动 ps -ef | grep redis<br><strong>运行redis</strong> redis-server /myRedis/redis.conf (建议在redis安装目录下启动，/usr/local/bin/)<br><strong>进入redis</strong> redis-cli -p 6379<br>set k1 HelloWorld<br>回复ok表示设置成功<br>get k1 可得到值HelloWorld</p>
</blockquote>
<h3 id="Redis启动后杂项基础知识"><a href="#Redis启动后杂项基础知识" class="headerlink" title="Redis启动后杂项基础知识"></a>Redis启动后杂项基础知识</h3><p>Redis是单线程的</p>
<blockquote>
<p>单进程模型来处理客户端的请求。对读写等事件的响应是通过对epoll函数的包装来做到的。Redis的实际处理速度完全依靠主进程的执行效率</p>
</blockquote>
<p>Redis默认16个数据库：</p>
<blockquote>
<p>设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id  </p>
</blockquote>
<p>查看库中数据条数</p>
<blockquote>
<p>dbsize</p>
</blockquote>
<p>查看所有key</p>
<blockquote>
<p>keys *</p>
</blockquote>
<p>清空当前库</p>
<blockquote>
<p>flushdb1</p>
</blockquote>
<p>清空所有库</p>
<blockquote>
<p>flushall</p>
</blockquote>
<p>Redis默认端口号</p>
<blockquote>
<p>6379</p>
</blockquote>
<h2 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h2><p>&#160; &#160; &#160; &#160; 可在官方文档中查看数据类型：<a href="https://redis.io/topics/data-types-intro" target="_blank" rel="noopener">https://redis.io/topics/data-types-intro</a><br>&#160; &#160; &#160; &#160; 中文网址：<a href="http://redis.cn/topics/data-types-intro.html#strings" target="_blank" rel="noopener">http://redis.cn/topics/data-types-intro.html#strings</a></p>
<h3 id="Redis五大数据类型"><a href="#Redis五大数据类型" class="headerlink" title="Redis五大数据类型"></a>Redis五大数据类型</h3><blockquote>
<p>String（字符串）string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M。<br>Hash（哈希）Redis hash 是一个键值对集合。Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。类似Java里面的Map&lt;String,Object&gt;<br>List（列表）Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。它的底层实际是个链表。<br>Set（集合）Redis的Set是string类型的无序集合。它是通过HashTable实现实现的。<br>zset(sorted set：有序集合)Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。</p>
</blockquote>
<h3 id="key常用指令"><a href="#key常用指令" class="headerlink" title="key常用指令"></a>key常用指令</h3><p>&#160; &#160; &#160; &#160; 查看Redis常用操作命令：<a href="http://redisdoc.com/" target="_blank" rel="noopener">http://redisdoc.com/</a></p>
<p><code>keys *</code> ：查看当前库的所有key。<br><code>exists key</code> ：判断某个key是否存在。<br><code>move key db</code>：移除键到指定数据库。<br><code>expire key 秒钟</code>：为key设置过期时间。（已经过期的key实际被移除，无法再设置时间）<br><code>ttl key</code>：查看还有多少秒过期，-1为永远不过期，-2为已过期。<br><code>type key</code>：查看你的可以是什么类型。<br><code>del key</code>：删除key。</p>
<h3 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h3><p><code>strlen key</code>：获取key对应value的长度。<br><code>incr key</code>：自增key的值，一定要是数字。<br><code>decr key</code>：自减key的值，一定要是数字。<br><code>incrby key num</code>：指定key的值增长指定数。<br><code>getrange key start_num end_num</code>：获取key中value指定字段，当数字为正数就是在前面获取（起始值为0），当数字为负数就在后面获取（-1表示最后一个值）。如图：<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304133927.png" alt=""><br><code>setrange key start_num new_value</code>：替换key中value，从第start_num开始，new_value有多长就会替换start_num及其后几位的value。如图：<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304134446.png" alt=""><br><code>setex key time value</code>：（set with expire）设置键为key的value，并设置过期时间为time。<br><code>setnx key value</code>：（set if not exist）设置键为key，值为value，若该key本身存在设置失败返回0。<br><code>mset k1 v1 k2 v2 k3 v3 ...</code>：批量设置键值对。<br><code>mget k1 k2 k3 ...</code>：批量获取。<br><code>msetnx k1 v11 k4 v4 k5 v5 ...</code>：批量判断设置，若其中一个值已经存在，所有的都会设置失败。<br><code>getset key value</code>：先get获取，在set设置，如图<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304140423.png" alt=""></p>
<h3 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h3><blockquote>
<p>单值多value</p>
</blockquote>
<p><code>lpush mylist 1 2 3 4 5</code>：左边插入。<br><code>lrange mylist start_num end_num</code>：读取左边的value ，start_num开始，end_num结束。（-1表示最后一位）。如图：<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304143623.png" alt=""><br><code>rpush mylist 6 7 8 9</code>：右边插入。<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304144019.png" alt=""><br><code>lpop mylist</code>：删除mylist中最左边的值。<br><code>rpop mylist</code>：：删除mylist中最右边的值。<br><code>lindex mylist num</code>：同过索引获得元素值。<br><code>llen mylist</code> ：获取mylist长度。<br><code>lrem mylist num value</code>：指定key中删除num个值为value的元素。<br><code>ltrim key start_index end_index</code>截取指定范围的值重新再赋值给key。<br><code>rpoplpush mylist01 mylist02</code>；删除mylist01最右边的值添加到mylist02的最左边。<br><code>lset mylist index value</code>：设置mylist中索引为index的值为value。<br><code>linsert mylist before/after v1 v2</code> ：在mylist中的v1之前或之后插入v2。</p>
<h3 id="集合（set）"><a href="#集合（set）" class="headerlink" title="集合（set）"></a>集合（set）</h3><blockquote>
<p>单值多value</p>
</blockquote>
<p><code>sadd set01 v1 v2 v3 v4</code> :set添加剂多个value，他可以自动去掉重复值(他是无序的)。<br><code>smembers set01</code>：查看set。<br><code>sismember set01 v1</code>：查看set中是否有v1,有的话返回1，没有返回0。<br><code>scard set01</code>：获取set中元素个数。<br><code>srem seto1 value</code>：删除集合中的元素。<br><code>srandmember set01 num</code>：在set01中随机取num个值。<br><code>spop set01</code>：随机出栈。<br><code>smove set01 set02 set01_v</code>：随机移动set01中的set_v到set02中。</p>
<h4 id="数学集合类"><a href="#数学集合类" class="headerlink" title="数学集合类"></a>数学集合类</h4><p><code>sdiff set01 set02</code>：差集</p>
<p><code>sinter set01 set02</code>：交集</p>
<p><code>sunion set01 set02</code>：并集</p>
<h3 id="哈希（Hash）"><a href="#哈希（Hash）" class="headerlink" title="哈希（Hash）"></a>哈希（Hash）</h3><blockquote>
<p>kv模式不变，但v是一个键值对</p>
</blockquote>
<p><code>hset hash01 name tom</code>：添加hash。<br><code>hget hash01 name</code>：获取hash01中的name键值对的值。<br><code>hmset hash01 name tom sex 男 age 18</code>：批量在hash01中添加键值对。<br><code>hmget hash01 name sex age</code>：批量获取hash01中键值对的值。<br><code>hgetall hash01</code>：获取hash01中所有键和值。<br><code>hdel hash01 name</code>：指定hash中的键来删除键值对。<br><code>hlen hash01</code>：获取hash01中的键值对个数。<br><code>hexists hash01 name</code>：判断hash01中是否存在name的key。存在回1，不存在回0。<br><code>hkeys hash01</code>：获取hash01中所有key集合。<br><code>hvals hash01</code>：获取hash01中所有values集合。<br><code>hincrby hash01 age num</code>：指定hash01中的age加num。num是整数类型的数字。<br><code>hincrbyfloat hash01 salary float</code>：指定hash01中的salary加float。float是浮点型。<br><code>hsetnx hexo01 name tom</code>：不存在就赋值，存在就无效。</p>
<h3 id="有序集合Zset-sorted-set"><a href="#有序集合Zset-sorted-set" class="headerlink" title="有序集合Zset(sorted set)"></a>有序集合Zset(sorted set)</h3><blockquote>
<p>在set基础上，加一个score值。之前set是k1 v1 v2 v3，现在zset是k1 score1 v1 score2 v2</p>
</blockquote>
<p><code>zadd zset01 60 v1 70 v2 80 v3</code>：添加Zset。<br><code>zrange zset01 0 -1</code>：遍历所有的zset中的value。<br><code>zrange zset01 0 -1 withscores</code> 伴随分数遍历出来。<br><code>zrevrangebyscore  zseto1 60 80</code>遍历60分到80分中的值。<br><code>zrevrangebyscore  zseto1 60 80 withscores</code>：伴随分数遍历60 到 80之间的。<br><code>zrevrangebyscore  zseto1 60 （80</code>：遍历不包含80。<br><code>zrevrangebyscore  zseto1 60 80 limit tageNo size</code> ：从tageNo 往后查size个60 到 80 之间的value。<br><code>zrem zset01 v1</code>：删除某score下对应的value值，作用是删除元素。<br><code>zcard zset01</code>：查询zset01中元素个数。<br><code>zcount zset01 60 80</code>：根据范围查元素个数。<br><code>zrank zset01 value</code>：获取value下标的值。<br><code>zscore zset01 value</code>：获取value对应的score值。<br><code>zrevrank zset01 value</code>：反转后获取value下标。<br><code>zrevrange zset01 0 -1</code>：反转获取value。<br><code>zrevrange zset01 end_score start_score</code>：通过反转获取指定score范围的value。</p>
<h2 id="解析配置文件"><a href="#解析配置文件" class="headerlink" title="解析配置文件"></a>解析配置文件</h2><blockquote>
<p>可参考菜鸟教程看更详细说明：<a href="https://www.runoob.com/redis/redis-conf.html" target="_blank" rel="noopener">https://www.runoob.com/redis/redis-conf.html</a></p>
</blockquote>
<h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><blockquote>
<p>本身在/usr/local/java/redis-3.0.4下的 redis.conf，但配置尽量不去动最初的配置文件，用我们之前复制的配置文件。<br>去到配置所在目录  cd /myRedis/<br>进入配置文件 vim redis.conf </p>
</blockquote>
<h3 id="units单位"><a href="#units单位" class="headerlink" title="units单位"></a>units单位</h3><blockquote>
<p>1  配置大小单位,开头定义了一些基本的度量单位，只支持bytes，不支持bit<br>2  对大小写不敏感<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304173522.png" alt=""></p>
</blockquote>
<h3 id="INCLUDES包含"><a href="#INCLUDES包含" class="headerlink" title="INCLUDES包含"></a>INCLUDES包含</h3><blockquote>
<p>和我们的Struts2配置文件类似，可以通过includes包含，redis.conf可以作为总闸，包含其他。<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304173917.png" alt=""></p>
</blockquote>
<h3 id="GENERAL通用"><a href="#GENERAL通用" class="headerlink" title="GENERAL通用"></a>GENERAL通用</h3><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304174432.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304174918.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304182136.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304182432.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304182633.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304182742.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304182925.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304183027.png" alt=""></p>
<h3 id="SNAPSHOTTING快照"><a href="#SNAPSHOTTING快照" class="headerlink" title="SNAPSHOTTING快照"></a>SNAPSHOTTING快照</h3><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304194237.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304194507.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304203054.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304203240.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304203430.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304203804.png" alt=""></p>
<h3 id="REPLICATION复制"><a href="#REPLICATION复制" class="headerlink" title="REPLICATION复制"></a>REPLICATION复制</h3><h3 id="SECURITY安全"><a href="#SECURITY安全" class="headerlink" title="SECURITY安全"></a>SECURITY安全</h3><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304184312.png" alt=""></p>
<h3 id="LIMITS限制"><a href="#LIMITS限制" class="headerlink" title="LIMITS限制"></a>LIMITS限制</h3><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304185001.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304185113.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304185552.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304190049.png" alt=""></p>
<h3 id="APPEND-ONLY-MODE追加"><a href="#APPEND-ONLY-MODE追加" class="headerlink" title="APPEND ONLY MODE追加"></a>APPEND ONLY MODE追加</h3><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305005700.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305005852.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305010224.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305015013.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305015538.png" alt=""></p>
<h3 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h3><blockquote>
<p>参数说明redis.conf 配置项说明如下：</p>
<ol>
<li>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程  daemonize no</li>
<li>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定  pidfile /var/run/redis.pid</li>
<li>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字  port 6379</li>
<li>绑定的主机地址  bind 127.0.0.1</li>
<li>当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能  timeout 300</li>
<li>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose  loglevel verbose</li>
<li>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null  logfile stdout</li>
<li>设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id  databases 16</li>
<li>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合  save <seconds> <changes>  Redis默认配置文件中提供了三个条件：  save 900 1  save 300 10  save 60 10000  分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。 </li>
<li>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大  rdbcompression yes</li>
<li>指定本地数据库文件名，默认值为dump.rdb  dbfilename dump.rdb</li>
<li>指定本地数据库存放目录  dir ./</li>
<li>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步  slaveof <masterip> <masterport></li>
<li>当master服务设置了密码保护时，slav服务连接master的密码  masterauth <master-password></li>
<li>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭  requirepass foobared</li>
<li>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息  maxclients 128</li>
<li>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区  maxmemory <bytes></li>
<li>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no  appendonly no</li>
<li>指定更新日志文件名，默认为appendonly.aof   appendfilename appendonly.aof</li>
<li>指定更新日志条件，共有3个可选值：   no：表示等操作系统进行数据缓存同步到磁盘（快）   always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）   everysec：表示每秒同步一次（折衷，默认值）  appendfsync everysec </li>
<li>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）   vm-enabled no</li>
<li>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享   vm-swap-file /tmp/redis.swap</li>
<li>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0   vm-max-memory 0</li>
<li>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值   vm-page-size 32</li>
<li>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。   vm-pages 134217728</li>
<li>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4   vm-max-threads 4</li>
<li>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启  glueoutputbuf yes</li>
<li>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法  hash-max-zipmap-entries 64  hash-max-zipmap-value 512</li>
<li>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）  activerehashing yes</li>
<li>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件  include /path/to/local.conf</li>
</ol>
</blockquote>
<h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><blockquote>
<p>redis持久化由RDB和AOF完成</p>
</blockquote>
<h3 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h3><h4 id="RDB是什么"><a href="#RDB是什么" class="headerlink" title="RDB是什么"></a>RDB是什么</h4><blockquote>
<p>在指定的时间间隔内,将内存中的数据及快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。<br>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方<br>式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p>
</blockquote>
<h4 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h4><blockquote>
<p>fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）<br>数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</p>
</blockquote>
<h4 id="dump-rdb"><a href="#dump-rdb" class="headerlink" title="dump.rdb"></a>dump.rdb</h4><blockquote>
<p>rdb 保存的是dump.rdb文件<br>在 /usr/local/bin目录下保存</p>
</blockquote>
<h4 id="如何触发RDB快照"><a href="#如何触发RDB快照" class="headerlink" title="如何触发RDB快照"></a>如何触发RDB快照</h4><ul>
<li>配置文件中默认的快照配置</li>
<li>命令save或者是bgsave，来创建当前数据库的备份。该命令将在 redis 安装目录中创建dump.rdb文件。</li>
<li>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</li>
</ul>
<h4 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h4><blockquote>
<p>如果需要恢复数据，只需将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可。获取 redis 目录可以使用 CONFIG 命令，如下所示：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET dir</span><br><span class="line"> &quot;dir&quot;</span><br><span class="line"> &quot;&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&quot;</span><br></pre></td></tr></table></figure>
<h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><blockquote>
<p>适合大规模的数据恢复<br>对数据完整性和一致性要求不高</p>
</blockquote>
<h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><blockquote>
<p>在一定间隔时间做一次备份，所以如果redis意外down掉的话，就会丢失最后一次快照后的所有修改。<br>fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑。</p>
</blockquote>
<h4 id="如何停止"><a href="#如何停止" class="headerlink" title="如何停止"></a>如何停止</h4><blockquote>
<p>动态所有停止RDB保存规则的方法：redis-cli config set save “”<br>即在配置文件中进行了一下修改<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304205359.png" alt=""></p>
</blockquote>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304205629.png" alt=""></p>
<h3 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h3><blockquote>
<p>以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p>
</blockquote>
<h4 id="AOF的启动-恢复-修复"><a href="#AOF的启动-恢复-修复" class="headerlink" title="AOF的启动/恢复/修复"></a>AOF的启动/恢复/修复</h4><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><blockquote>
<p>AOF保存在apprndonly.aof文件中，配置位置在 /usr/local/bin目录下<br>修改  /myRedis中的conf文件<br>启动设置将conf文件中默认的appendonly no 改为 yes</p>
</blockquote>
<h5 id="正常恢复"><a href="#正常恢复" class="headerlink" title="正常恢复"></a>正常恢复</h5><blockquote>
<p>将有数据的aof文件复制一份保存到对应目录(config get dir)<br>恢复：重启redis然后重新加载</p>
</blockquote>
<h4 id="备份被写坏的AOF文件"><a href="#备份被写坏的AOF文件" class="headerlink" title="备份被写坏的AOF文件"></a>备份被写坏的AOF文件</h4><blockquote>
<p><code>redis-check-aof --fix  appendonli.aof</code>：在 /usr/local/bin/ 目录及redis安装目录下启动redis-check-aof –fix 进行修复aof文件。<br>恢复：重启redis然后重新加载</p>
</blockquote>
<h4 id="rewrit重写"><a href="#rewrit重写" class="headerlink" title="rewrit重写"></a>rewrit重写</h4><blockquote>
<p>重写原理：AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似。<br>触发机制：Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发。可见上文解析配置文件–&gt;APPEND ONLY MODE追加。</p>
</blockquote>
<h4 id="AOF优劣势"><a href="#AOF优劣势" class="headerlink" title="AOF优劣势"></a>AOF优劣势</h4><h5 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h5><blockquote>
<p>三种模式下：<br>每修改同步：appendfsync always   同步持久化 每次发生数据变更会被立即记录到磁盘  性能较差但数据完整性比较好。（慢）<br>每秒同步：appendfsync everysec    异步操作，每秒记录   如果一秒内宕机，有数据丢失。（折中）<br>不同步：appendfsync no   从不同步。（快）</p>
</blockquote>
<h5 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h5><blockquote>
<p>相同数据集的数据而言aof文件要远大于rdb文件，恢复速度慢于rdb。<br>aof运行效率要慢于rdb,每秒同步策略效率较好，不同步效率和rdb相同。</p>
</blockquote>
<h4 id="AOF小结"><a href="#AOF小结" class="headerlink" title="AOF小结"></a>AOF小结</h4><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305103554.png" alt=""></p>
<h3 id="RDB和AOF总结"><a href="#RDB和AOF总结" class="headerlink" title="RDB和AOF总结"></a>RDB和AOF总结</h3><blockquote>
<p>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储。<br>AOF持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾。Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大。<br>只做缓存：如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式。</p>
</blockquote>
<h4 id="同时开启两种持久化方式"><a href="#同时开启两种持久化方式" class="headerlink" title="同时开启两种持久化方式"></a>同时开启两种持久化方式</h4><blockquote>
<p>在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。<br>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)，快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。</p>
</blockquote>
<h4 id="性能建议"><a href="#性能建议" class="headerlink" title="性能建议"></a>性能建议</h4><blockquote>
<p>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。如果Enalbe AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。代价一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。默认超过原大小100%大小时重写可以改到适当的数值。如果不Enable AOF ，仅靠Master-Slave Replication 实现高可用性也可以。能省掉一大笔IO也减少了rewrite时带来的系统波动。代价是如果Master/Slave同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave中的RDB文件，载入较新的那个。新浪微博就选用了这种架构。</p>
</blockquote>
<h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><blockquote>
<p>MULTI 、 EXEC 、 DISCARD 和 WATCH 是 Redis 事务相关的命令。事务可以一次执行多个命令， 并且带有以下两个重要的保证：<br><code>事务是一个单独的隔离操作</code>：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。<br><code>事务是一个原子操作</code>：事务中的命令要么全部被执行，要么全部都不执行。<br>redis事务里面执行的操作都是入队的过程：<br>一个队列中，一次性、顺序性、排他性的执行一系列命令</p>
</blockquote>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><blockquote>
<p><code>MULTI 命令</code>用于开启一个事务，它总是返回 OK 。<br>MULTI 执行之后， 客户端可以继续向服务器发送任意多条命令， 这些命令不会立即被执行， 而是而是返回QUEUED,表示被放到一个队列中， 当 <code>EXEC</code>命令（执行命令）被调用时， 所有队列中的命令才会被执行。<br>另一方面， 通过调用 <code>DISCARD</code> ， 客户端可以清空事务队列， 并放弃<code>执行事务</code>。<br><code>全体连坐</code>：当事务开启后，客户端向服务器发送命令时，当执行一个错误命令没有成功入队（及没有返回QUEUEN），用EXEC触发并执行事务时，该队列中的所有命令都不会执行。（相当于Java中的编译期异常）<br><code>冤头债主</code>：当事务开启后，客户端向服务器发送命令时，当执行一个错误命令成功入队（返回QUEUEN），用EXEC触发并执行事务时，该队列中的所有命令除了异常命令外都将执行。（相当于Java中的运行期异常）。由此可以看出Redis在这里不支持事务，所以说Redis是部分支持事务。<br><code>WATCH</code>命令可以为 Redis 事务提供 check-and-set （CAS）行为。（注意：WATCH不能写在MULTI中）<br>被 WATCH 的键会被监视，并会发觉这些键是否被改动过了。 如果有至少一个被监视的键在 EXEC 执行之前被修改了， 那么整个事务都会被取消， EXEC 返回nil-reply来表示事务已经失败。<br>如果在 WATCH 执行之后， EXEC 执行之前， 有其他客户端修改了监控的值， 那么当前客户端的事务就会失败。 程序需要做的， 就是不断重试这个操作， 直到没有发生碰撞为止。<br>WATCH 使得 EXEC 命令需要有条件地执行： 事务只能在所有被监视键都没有被修改的前提下执行， 如果这个前提不能满足的话，事务就不会被执行。<br>WATCH 命令可以被调用多次。 对键的监视从 WATCH 执行之后开始生效， 直到调用 EXEC 为止。用户还可以在单个 WATCH 命令中监视任意多个键：WATCH key1 key2 key3。<br>当 EXEC 被调用时， 不管事务是否成功执行， 对所有键的监视都会被取消。<br>使用无参数的 <code>UNWATCH</code> 命令可以手动取消对所有键的监视。</p>
</blockquote>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><blockquote>
<p>单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。<br>没有隔离级别的概念：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题。<br>不保证原子性：redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚。</p>
</blockquote>
<h2 id="Redis的发布订阅"><a href="#Redis的发布订阅" class="headerlink" title="Redis的发布订阅"></a>Redis的发布订阅</h2><blockquote>
<p>进程间的一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。<br>先订阅后发布后才能收到消息：<br>1 可以一次性订阅多个，SUBSCRIBE c1 c2 c3；<br>2 消息发布，PUBLISH c2 hello-redis；<br>3 订阅多个，通配符<em>， PSUBSCRIBE new</em>；<br>4 收取消息， PUBLISH HelloWorld。</p>
</blockquote>
<h2 id="Redis的主从复制（Master-Slave）"><a href="#Redis的主从复制（Master-Slave）" class="headerlink" title="Redis的主从复制（Master/Slave）"></a>Redis的主从复制（Master/Slave）</h2><blockquote>
<p>我们所说的主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主。<br>可以实现：读写分离，容灾备份。</p>
</blockquote>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul>
<li><p>配从不配主<br>在多个服务器中，要指定主从关系只需要在从库中配置关系。</p>
</li>
<li><p>从库配置<br>slaveof 主库IP 主库端口<br>每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件。</p>
</li>
<li><p>修改配置细节操作</p>
<blockquote>
<ol>
<li>拷贝多个redis.conf文件。</li>
<li>开启daemonize yes。</li>
<li>pid文件名字。</li>
<li>指定端口</li>
<li>log文件名字。</li>
<li>dump.rdb名字<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305172834.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305172638.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305172724.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305172803.png" alt=""></li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="一主二仆"><a href="#一主二仆" class="headerlink" title="一主二仆"></a>一主二仆</h3><p>一个Master两个Slave<br> <code>info replication</code>：查看日志。</p>
<blockquote>
<p>主从问题： </p>
<ol>
<li>主机set的数据，从机都可以get到。</li>
<li>从机只能读，无法写。</li>
<li>主机shutdown后，从机原地待命。</li>
<li>主机又回来了后，主机新增记录，从机还能顺利复制</li>
<li>从机down后都需要重新连接，除非你配置进redis.conf文件。</li>
</ol>
</blockquote>
<h3 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h3><blockquote>
<p>上一个Slave可以是下一个slave的Master，Slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master，可以有效减轻master的写压力。<br>中途变更转向:会清除之前的数据，重新建立拷贝最新的。<br><code>slaveof 新主库IP 新主库端口</code></p>
</blockquote>
<ul>
<li>反客为主<blockquote>
<p>若主机关闭，从机要变成主机直接  <code>SLAVEOF no one</code></p>
</blockquote>
</li>
</ul>
<h3 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h3><blockquote>
<p>slave启动成功连接到master后会发送一个sync命令。<br>Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步。<br>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。<br>增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步。<br>但是只要是重新连接master,一次完全同步（全量复制）将被自动执行。</p>
</blockquote>
<h3 id="哨兵模式-sentinel"><a href="#哨兵模式-sentinel" class="headerlink" title="哨兵模式(sentinel)"></a>哨兵模式(sentinel)</h3><blockquote>
<p>反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p>
</blockquote>
<blockquote>
<ol>
<li>自定义的/myRedis目录下新建sentinel.conf文件，名字绝不能错。<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305180725.png" alt=""></li>
<li>sentinel monitor 被监控数据库名字(自己起名字) 127.0.0.1 6379 1。<br>上面最后一个数字1，表示主机挂掉后salve投票看让谁接替成为主机，得票数多少后成为主机。<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305181235.png" alt=""></li>
<li>redis-sentinel /myredis/sentinel.conf<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305181408.png" alt=""></li>
</ol>
</blockquote>
<blockquote>
<ol start="4">
<li>当master挂掉后，哨兵模式将启动投票模式选出一个主机。之前的master重启回来后哨兵模式再次启动将它变成新主机下的从机。<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305182744.png" alt=""></li>
</ol>
</blockquote>
<h3 id="复制的缺点"><a href="#复制的缺点" class="headerlink" title="复制的缺点"></a>复制的缺点</h3><blockquote>
<p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p>
</blockquote>
<h2 id="Redis的Java客户端"><a href="#Redis的Java客户端" class="headerlink" title="Redis的Java客户端"></a>Redis的Java客户端</h2><h3 id="客户端上基本配置及使用："><a href="#客户端上基本配置及使用：" class="headerlink" title="客户端上基本配置及使用："></a>客户端上基本配置及使用：</h3><ol>
<li>配置Java环境，创建项目，导入jar包如下图：</li>
</ol>
<p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305190335.png" alt=""></p>
<ol start="2">
<li>服务器端需要在防火墙中放行Redis端口6379</li>
</ol>
<blockquote>
<p><code>service iptables status</code>：查看是否放行端口。<br><code>iptables -I INPUT -p tcp --dport 6379 -j ACCEPT</code>：放行端口。<br><code>service iptables save</code>：保存端口。<br><code>service iptables rstatus</code>：重启Redis。</p>
</blockquote>
<ol start="3">
<li>idea中用Redis</li>
</ol>
<p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305191216.png" alt=""></p>
<h3 id="事务提交基本使用："><a href="#事务提交基本使用：" class="headerlink" title="事务提交基本使用："></a>事务提交基本使用：</h3><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305192002.png" alt=""></p>
<h3 id="主从复制："><a href="#主从复制：" class="headerlink" title="主从复制："></a>主从复制：</h3><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305193418.png" alt=""></p>
<h3 id="JedisPool"><a href="#JedisPool" class="headerlink" title="JedisPool"></a>JedisPool</h3><h4 id="配置连接池："><a href="#配置连接池：" class="headerlink" title="配置连接池："></a>配置连接池：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">JedisUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedisInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jedisPool == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (JedisUtils<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (jedisPool == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">                    jedisPoolConfig.setMaxActive(<span class="number">10000</span>);</span><br><span class="line">                    jedisPoolConfig.setMaxIdle(<span class="number">32</span>);</span><br><span class="line">                    jedisPoolConfig.setMaxWait(<span class="number">3000</span>);</span><br><span class="line">                    jedisPoolConfig.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line">                    jedisPool = <span class="keyword">new</span> JedisPool(jedisPoolConfig, <span class="string">"192.168.74.129"</span>, <span class="number">6379</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Jedis jedis)</span> </span>&#123;</span><br><span class="line">        jedisPool.returnResourceObject(jedis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200305195438.png" alt=""></p>
<h4 id="配置参数："><a href="#配置参数：" class="headerlink" title="配置参数："></a>配置参数：</h4><blockquote>
<p>JedisPool的配置参数大部分是由JedisPoolConfig的对应项来赋值的。<br><code>maxActive</code>：控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted。<br><code>maxIdle</code>：控制一个pool最多有多少个状态为idle(空闲)的jedis实例；<br>whenExhaustedAction：表示当pool中的jedis实例都被allocated完时，pool要采取的操作；默认有三种。 WHEN_EXHAUSTED_FAIL –&gt; 表示无jedis实例时，直接抛出NoSuchElementException； WHEN_EXHAUSTED_BLOCK –&gt; 则表示阻塞住，或者达到maxWait时抛出JedisConnectionException； WHEN_EXHAUSTED_GROW –&gt; 则表示新建一个jedis实例，也就说设置的maxActive无用；<br><code>maxWait</code>：表示当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛JedisConnectionException；testOnBorrow：获得一个jedis实例的时候是否检查连接可用性（ping()）；如果为true，则得到的jedis实例均是可用的；testOnReturn：return 一个jedis实例给pool时，是否检查连接可用性（ping()）；testWhileIdle：如果为true，表示有一个idle object evitor线程对idle object进行扫描，如果validate失败，此object会被从pool中drop掉；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义；timeBetweenEvictionRunsMillis：表示idle object evitor两次扫描之间要sleep的毫秒数；numTestsPerEvictionRun：表示idle object evitor每次扫描的最多的对象数；minEvictableIdleTimeMillis：表示一个对象至少停留在idle状态的最短时间，然后才能被idle object evitor扫描并驱逐；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义；softMinEvictableIdleTimeMillis：在minEvictableIdleTimeMillis基础上，加入了至少minIdle个对象已经在pool里面了。如果为-1，evicted不会根据idle time驱逐任何对象。如果minEvictableIdleTimeMillis&gt;0，则此项设置无意义，且只有在timeBetweenEvictionRunsMillis大于0时才有意义；<br><code>lifo</code>：borrowObject返回对象时，是采用DEFAULT_LIFO（last in first out，即类似cache的最频繁使用队列），如果为False，则表示FIFO队列；</p>
</blockquote>
<p><code>其中JedisPoolConfig对一些参数的默认设置如下：</code><br>testWhileIdle=true<br>minEvictableIdleTimeMills=60000<br>timeBetweenEvictionRunsMillis=30000<br>numTestsPerEvictionRun=-1</p>
]]></content>
      <categories>
        <category>NoSql</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>NoSql</tag>
      </tags>
  </entry>
</search>
