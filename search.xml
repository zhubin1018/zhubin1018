<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Redis</title>
    <url>/2020/03/02/Redis/</url>
    <content><![CDATA[<h1 id="NoSql"><a href="#NoSql" class="headerlink" title="NoSql"></a>NoSql</h1><p>&#160; &#160; &#160; &#160;Redis属于NoSql里面的一个具体的技术</p>
<h2 id="NoSql入门和概述"><a href="#NoSql入门和概述" class="headerlink" title="NoSql入门和概述"></a>NoSql入门和概述</h2><p>&#160; &#160;<strong>入门概述</strong></p>
<p>&#160; &#160; &#160; &#160;在90年代，一个网站的访问量一般都不大，用单个数据库完全可以轻松应付。在那个时候，更多的都是静态网页，动态交互类型的网站不多。随着现在互联网用户剧增, 如果同时大量语句进行, MySQL将无法应付。数据量的剧增,会存在一个机器放不下, 数据的索引也存放不下。同时访问量的增加, MySQL就开始出现性能问题。为了提高性能, 开始利用缓存, 减少MySQL性能消耗。</p>
<a id="more"></a>
<p>&#160; &#160; &#160; &#160;但随着访问量持续增大，多台机器之间缓存无法共享，大量的小文件缓冲也会带来比较高的IO压力。此时Memcached自然的成为了一个时尚的产品。它解决了多台机器数据共用问题。Memcached(缓存)+MySQL+垂直拆分技术的出现，来进行主从分离，就出现了分表分库提高性能。随着访问量继续增长，分表分库+水平拆分+mysql集群。但MySQL存储大文件时，在做数据库恢复时特别慢，大数据下它表现出的扩展性差，表结构更加困难。</p>
<p>&#160; &#160; &#160; &#160;当今互联网架构图：<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200303141740.png" alt=""></p>
<p>&#160; &#160; &#160; &#160;为什么要用NoSql?<br>&#160; &#160; &#160; &#160;今天我们可以通过第三方平台可以很容易的访问和抓取数据。用户的个人信息，网络地址，操作日志 成倍增加，如果我们要对这些用户数据进行挖掘，那么SQL数据库已经不适合这些应用了。NoSQL数据库的发展能很好的处理这些数据。</p>
<p>&#160; &#160; &#160; &#160;什么是NoSql？<br>&#160; &#160; &#160; &#160;<u>NoSql=Not Only SQL</u>，不仅仅是SQL，泛指<u>非关系形数据库</u>，解决大规模数据集合，多重数据种类带来的挑战。</p>
<p>&#160; &#160; &#160; &#160;NoSql能干嘛？<br>&#160; &#160; &#160; &#160;易扩展，去掉关系型数据库的关系型特性，数据之间无关系，非常容易扩展；大数据量高性能，每一秒中支持11万次读，8万次写。大数量下表现优异，符合当今互联网时代下的发展；多样灵活的数据模型，随时储存自定义的数据类型。对应KV键值对，Cashe缓存型数据库,Persistence持久性。</p>
<p>&#160;&#160; &#160; &#160;NoSql对应的三个产品：<br>&#160;&#160; &#160; &#160; Redis | memecache | Mongdb</p>
<h2 id="NoSql-3V-3高"><a href="#NoSql-3V-3高" class="headerlink" title="NoSql 3V + 3高"></a><strong>NoSql 3V + 3高</strong></h2><p>&#160; &#160; &#160; &#160;大数据时代的3V：<br>&#160; &#160; &#160; &#160;海量Volume | 多样Variety | 实时Velocity<br>&#160; &#160; &#160; &#160;互联网需求的3高：<br>&#160; &#160; &#160; &#160;高并发 | 高可扩 | 高性能</p>
<h2 id="当下NoSql的经典应用"><a href="#当下NoSql的经典应用" class="headerlink" title="当下NoSql的经典应用"></a><strong>当下NoSql的经典应用</strong></h2><p>&#160; &#160; &#160; &#160; 当下的应用是sql和nosql一起使用的。</p>
<p>&#160; &#160; &#160; &#160; NoSql经典应用：</p>
<p>&#160; &#160; &#160; &#160; 阿里巴巴技术演变图:<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200303155442.png" alt=""></p>
<p>&#160; &#160; &#160; &#160; 阿里巴巴中文网:</p>
<p><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200303155136.png" alt=""><br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200303155257.png" alt=""></p>
<h2 id="NoSQL数据模型简介"><a href="#NoSQL数据模型简介" class="headerlink" title="NoSQL数据模型简介"></a><strong>NoSQL数据模型简介</strong></h2><p>&#160; &#160; &#160; &#160; 聚合模型<br>&#160; &#160; &#160; &#160; KV键值；bson；列族（顾名思义，是按列存储数据的。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的IO优势。）；图形。</p>
<h2 id="NoSQL数据库的四大分类"><a href="#NoSQL数据库的四大分类" class="headerlink" title="NoSQL数据库的四大分类"></a><strong>NoSQL数据库的四大分类</strong></h2><p>&#160; &#160; &#160; &#160; KV键值：<br>典型介绍<br>新浪：BerkeleyDB+redis | 美团：redis+tair | 阿里、百度：memcache+redis</p>
<p>&#160; &#160; &#160; &#160; 文档型数据库(bson格式比较多)：<br>典型介绍<br>CouchDB | MongoDB（是一个基于分布式文件存储的数据库一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。）</p>
<p>&#160; &#160; &#160; &#160; 列存储数据库<br>Cassandra, HBase | 分布式文件系统</p>
<p>&#160; &#160; &#160; &#160; 图关系数据库<br>它不是放图形的，放的是关系比如:朋友圈社交网络、广告推荐系统 ；社交网络，推荐系统等。专注于构建关系图谱;代表有：Neo4J, InfoGrid。</p>
<h2 id="在分布式数据库中CAP原理CAP-BASE"><a href="#在分布式数据库中CAP原理CAP-BASE" class="headerlink" title="在分布式数据库中CAP原理CAP+BASE"></a><strong>在分布式数据库中CAP原理CAP+BASE</strong></h2><p>&#160; &#160; &#160; &#160; 传统的ACID分别是什么？</p>
<blockquote>
<p>事务在英文中是transaction，和现实世界中的交易很类似，它有如下四个特性：<br>1、A (Atomicity) 原子性原子性很容易理解，也就是说事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚。比如银行转账，从A账户转100元至B账户，分为两个步骤：1）从A账户取100元；2）存入100元至B账户。这两步要么一起完成，要么一起不完成，如果只完成第一步，第二步失败，钱会莫名其妙少了100元。<br>2、C (Consistency) 一致性一致性也比较容易理解，也就是说数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。<br>3、I (Isolation) 独立性所谓的独立性是指并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。比如现有有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的<br>4、D (Durability) 持久性持久性是指一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。</p>
</blockquote>
<p>&#160; &#160; &#160; &#160; <strong>CAP</strong><br>&#160; &#160; &#160; &#160; C: Consistency（强一致性）<br>&#160; &#160; &#160; &#160; A: Availability（高可用性）<br>&#160; &#160; &#160; &#160; P:Partition tolerance（分区容错性）</p>
<p>&#160; &#160; &#160; &#160; CAP3选2<br>&#160; &#160; &#160; &#160;<br>CAP理论就是说在分布式存储系统中，最多只能实现上面的两点。而由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容忍性是我们必须需要实现的。所以我们只能在一致性和可用性之间进行权衡。</p>
<p>CA 传统Oracle数据库 |  AP 大多数网站架构的选择 |  CP Redis、Mongodb</p>
<p>一致性和可用性之间取一个平衡。多余大多数web应用，其实并不需要强一致性。因此牺牲C换取P，这是目前分布式数据库产品的方向</p>
<p>&#160; &#160; &#160; &#160; <strong>BASE</strong><br>&#160; &#160; &#160; &#160; BASE就是为了解决关系数据库强一致性引起的问题而引起的可用性降低而提出的解决方案。<br>&#160; &#160; &#160; &#160; BASE其实是下面三个术语的缩写：<br>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; 基本可用（Basically Available）<br>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; 软状态（Soft state）<br>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; 最终一致（Eventually consistent</p>
<p>&#160; &#160; &#160; &#160; <strong>分布式+集群简介</strong></p>
<blockquote>
<p>分布式系统（distributed system） 由多台计算机和通信的软件组件通过计算机网络连接（本地网络或广域网）组成。分布式系统是建立在网络之上的软件系统。正是因为软件的特性，所以分布式系统具有高度的内聚性和透明性。因此，网络和分布式系统之间的区别更多的在于高层软件（特别是操作系统），而不是硬件。分布式系统可以应用在在不同的平台上如：Pc、工作站、局域网和广域网上等。<br>简单来讲：<br>1分布式：不同的多台服务器上面部署不同的服务模块（工程），他们之间通过Rpc/Rmi之间通信和调用，对外提供服务和组内协作。<br>2集群：不同的多台服务器上面部署相同的服务模块，通过分布式调度软件进行统一的调度，对外提供服务和访问。</p>
</blockquote>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis入门介绍"><a href="#Redis入门介绍" class="headerlink" title="Redis入门介绍"></a>Redis入门介绍</h2><p>&#160; &#160; &#160; &#160; <strong>入门概述</strong></p>
<p>&#160; &#160; &#160; &#160; Redis:REmote DIctionary Server(远程字典服务器)<br>&#160; &#160; &#160; &#160; 是完全开源免费的，用C语言编写的，遵守BSD协议，是一个高性能的(key/value)分布式内存数据库，基于内存运行并支持持久化的NoSQL数据库，是当前最热门的NoSql数据库之一,也被人们称为数据结构服务器。</p>
<p>&#160; &#160; &#160; &#160; Redis 与其他 key - value 缓存产品有以下三个特点：</p>
<blockquote>
<p>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用；<br>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储；<br>Redis支持数据的备份，即master-slave模式的数据备份；</p>
</blockquote>
<p>&#160; &#160; &#160; &#160; Redis能干嘛?<br>&#160; &#160; &#160; &#160; 内存存储和持久化：redis支持异步将内存中的数据写到硬盘上，同时不影响继续服务；取最新N个数据的操作，如：可以将最新的10条评论的ID放在Redis的List集合里面；模拟类似于HttpSession这种需要设定过期时间的功能；发布、订阅消息系统；定时器、计数器；</p>
<h3 id="安装并编写HelloWorld"><a href="#安装并编写HelloWorld" class="headerlink" title="安装并编写HelloWorld"></a>安装并编写HelloWorld</h3><blockquote>
<p>官方下载网站：<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a>(99%安装在Linux中)<br>下载完压缩包传到 /opt文件夹中<br>解压后存入 /usr/local/java 中<br>进入Redis中 cd redis-3.0.4/<br>安装gcc yum install gcc-c++<br>执行 make distclean之后执行make<br>执行安装 make install<br>查看默认安装目录 cd /usr/local/bin<br>ls-l 查看如下<br><img src="https://gitee.com/bin1018/MaYunImages/raw/master/img/20200304013652.png" alt=""><br>执行 cd /usr/local/java/redis-3.0.4/<br>找到一个 redis.conf<br>执行 mkdir /myRedis/<br>执行 cp redis.conf /myRedis/<br>执行 vim /myRedis/redis.conf/<br>修改 daemonize no 为 daemonize yes (使redis能在后台的方式运行)<br>编写Redis的HelloWorld<br>运行redis redis-server /myRedis/redis.conf<br>进入redis redis-cli -p 6379<br>set k1 HelloWorld<br>回复ok表示设置成功<br>get k1 可得到值HelloWorld</p>
</blockquote>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
</search>
